{"entries":[{"timestamp":1738766294537,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"20\" y=\"20\""],[0,"></b"]],"start1":67,"start2":67,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function () {\n\t\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":33,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"blocksprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":238,"start2":238,"length1":36,"length2":31}]}]},{"timestamp":1738766297661,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[1,"2"],[0,"0\" y=\""],[1,"2"],[0,"0\"><"]],"start1":104,"start2":104,"length1":14,"length2":16},{"diffs":[[0,"x=\"2"],[-1,"0"],[1,"2"],[0,"5\" y=\""],[1,"2"],[0,"0\"><"]],"start1":156,"start2":156,"length1":15,"length2":16}]}]},{"timestamp":1738784034686,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":253,"start2":253,"length1":17,"length2":21}]}]},{"timestamp":1738784068405,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"//% color=\"#00CC00\" icon=\"\\uf1f9\"\n//% block=\"BreedingBox\"\n//% block.loc.nl=\"Kweekbakje\"\nnamespace CBreedingBox {\n\n\n    //% block=\"measure the moisture\"\n    //% block.loc.nl = \"meet de grondvochtigheid\"\n    function measureMoisture(): number {\n        return 0\n    }\n\n    //% block=\"measure the humidity\"\n    //% block.loc.nl = \"meet de luchtvochtigheid\"\n    function measureHumidity(): number {\n        return 0\n    }\n\n    //% block=\"measure the temperature\"\n    //% block.loc.nl = \"meet de temperatuur\"\n    function measureTemperature(): number {\n        return 0\n    }\n\n    //% block=\"measure the amount of light\"\n    //% block.loc.nl = \"meet de hoeveelheid licht\"\n    function measureLight(): number {\n        let voltage = 0;\n        let lightintensity = 0;\n        voltage = pins.map(\n            pins.analogReadPin(lightintensitypin),\n            0,\n            1023,\n            0,\n            100\n        );\n        lightintensity = voltage;\n        return Math.round(lightintensity)\n        return 0\n    }\n\n\n}"],[1,"basic.forever(function () {\n\t\n})\n"]],"start1":0,"start2":0,"length1":1018,"length2":33}]}]},{"timestamp":1738784666847,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," {\n\n"],[-1,"    let PIN_LIGHT = DigitalPin.P0\n    let PIN_SDA = DigitalPin.P0\n    let PIN_SCL = DigitalPin.P0\n\n    let MOISTURE : number = 0\n    let HUMIDITY : number = 0\n    let TEMPERATURE : number = 0\n    let LIGHT : number = 0\n    let PRESSURE : number = 0\n\n    //% block=\"perform a measurement\"\n    //% block.loc.nl = \"voer een meting uit\"\n    function measure() {\n        let value: number\n        value = pins.map(pins.analogReadPin(PIN_LIGHT), 0, 1023, 0, 100);\n        LIGHT = Math.round(value)\n    }\n"],[0,"\n   "]],"start1":110,"start2":110,"length1":506,"length2":8},{"diffs":[[0," block=\""],[1,"measure the "],[0,"moisture"]],"start1":122,"start2":122,"length1":16,"length2":28},{"diffs":[[0,"c.nl = \""],[1,"meet de "],[0,"grondvoc"]],"start1":168,"start2":168,"length1":16,"length2":24},{"diffs":[[0,"nction m"],[1,"easureM"],[0,"oisture("]],"start1":208,"start2":208,"length1":16,"length2":23},{"diffs":[[0," block=\""],[1,"measure the "],[0,"humidity"]],"start1":274,"start2":274,"length1":16,"length2":28},{"diffs":[[0,"c.nl = \""],[1,"meet de "],[0,"luchtvoc"]],"start1":320,"start2":320,"length1":16,"length2":24},{"diffs":[[0,"unction "],[-1,"h"],[1,"measureH"],[0,"umidity("]],"start1":359,"start2":359,"length1":17,"length2":24},{"diffs":[[0," block=\""],[1,"measure the "],[0,"temperat"]],"start1":426,"start2":426,"length1":16,"length2":28},{"diffs":[[0,"c.nl = \""],[1,"meet de "],[0,"temperat"]],"start1":475,"start2":475,"length1":16,"length2":24},{"diffs":[[0,"unction "],[-1,"t"],[1,"measureT"],[0,"emperatu"]],"start1":509,"start2":509,"length1":17,"length2":24},{"diffs":[[0,"\n    //% block=\""],[1,"measure the "],[0,"amount of light\""]],"start1":571,"start2":571,"length1":32,"length2":44},{"diffs":[[0,"block.loc.nl = \""],[1,"meet de "],[0,"hoeveelheid lich"]],"start1":624,"start2":624,"length1":32,"length2":40},{"diffs":[[0,"unction "],[-1,"l"],[1,"measureL"],[0,"ight(): "]],"start1":672,"start2":672,"length1":17,"length2":24},{"diffs":[[0,"    "],[-1,"return LIGHT"],[1,"let voltage = 0;"],[0,"\n    "],[-1,"}\n\n"],[0,"    "],[-1,"//% block=\"amount of light\"\n    //% block.loc.nl = \"hoeveelheid licht\"\n    function pressure(): number {"],[1,"let lightintensity = 0;\n        voltage = pins.map(\n            pins.analogReadPin(lightintensitypin),\n            0,\n            1023,\n            0,\n            100\n        );\n        lightintensity = voltage;\n        return Math.round(lightintensity)"],[0,"\n   "]],"start1":709,"start2":709,"length1":136,"length2":286},{"diffs":[[0,"urn "],[-1,"PRESSURE"],[1,"0"],[0,"\n   "]],"start1":1003,"start2":1003,"length1":16,"length2":9}]}]},{"timestamp":1738785255268,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," return "],[-1,"MOISTURE"],[1,"0"],[0,"\n    }\n\n"]],"start1":721,"start2":721,"length1":24,"length2":17},{"diffs":[[0," return "],[-1,"HUMIDITY"],[1,"0"],[0,"\n    }\n\n"]],"start1":846,"start2":846,"length1":24,"length2":17},{"diffs":[[0," return "],[-1,"TEMPERATURE"],[1,"0"],[0,"\n    }\n\n"]],"start1":972,"start2":972,"length1":27,"length2":17},{"diffs":[[0,"k=\"a"],[-1,"ir pressure"],[1,"mount of light"],[0,"\"\n  "]],"start1":1135,"start2":1135,"length1":19,"length2":22},{"diffs":[[0," = \""],[-1,"luchtdruk"],[1,"hoeveelheid licht"],[0,"\"\n  "]],"start1":1175,"start2":1175,"length1":17,"length2":25},{"diffs":[[0,"RESSURE\n"],[-1,""],[0,"    }\n\n"],[1,"\n"],[0,"}"]],"start1":1248,"start2":1248,"length1":16,"length2":17}]}]},{"timestamp":1738785323519,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"er = 0\n\n"],[-1,"\n\n"],[0,"    //% "]],"start1":356,"start2":356,"length1":18,"length2":16}]}]},{"timestamp":1738785996711,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"er = 0\n\n"],[-1,"    "],[0,"\n\n    //"]],"start1":356,"start2":356,"length1":20,"length2":16}]}]},{"timestamp":1738785998896,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    "],[-1,"////////////\n    // BME280 //\n    ////////////\n\n    function setreg(reg: number, dat: number): void {\n        let buf = pins.createBuffer(2);\n        buf[0] = reg;\n        buf[1] = dat;\n        pins.i2cWriteBuffer(BME280_I2C_ADDR, buf);\n    }\n\n    function getreg(reg: number): number {\n        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);\n        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.UInt8BE);\n    }\n\n    function getInt8LE(reg: number): number {\n        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);\n        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.Int8LE);\n    }\n\n    function getUInt16LE(reg: number): number {\n        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);\n        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.UInt16LE);\n    }\n\n    function getInt16LE(reg: number): number {\n        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);\n        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.Int16LE);\n    }\n\n    let BME280_I2C_ADDR = 0x76\n\n    let dig_T1 = getUInt16LE(0x88)\n    let dig_T2 = getInt16LE(0x8A)\n    let dig_T3 = getInt16LE(0x8C)\n    let dig_P1 = getUInt16LE(0x8E)\n    let dig_P2 = getInt16LE(0x90)\n    let dig_P3 = getInt16LE(0x92)\n    let dig_P4 = getInt16LE(0x94)\n    let dig_P5 = getInt16LE(0x96)\n    let dig_P6 = getInt16LE(0x98)\n    let dig_P7 = getInt16LE(0x9A)\n    let dig_P8 = getInt16LE(0x9C)\n    let dig_P9 = getInt16LE(0x9E)\n\n    let dig_H1 = getreg(0xA1)\n    let dig_H2 = getInt16LE(0xE1)\n    let dig_H3 = getreg(0xE3)\n    let a = getreg(0xE5)\n    let dig_H4 = (getreg(0xE4) << 4) + (a % 16)\n    let dig_H5 = (getreg(0xE6) << 4) + (a >> 4)\n    let dig_H6 = getInt8LE(0xE7)\n\n    // Stores compensation values for Temperature (must be read from BME280 NVM)\n    let digT1Val = 0\n    let digT2Val = 0\n    let digT3Val = 0\n\n    // Stores compensation values for humidity (must be read from BME280 NVM)\n    let digH1Val = 0\n    let digH2Val = 0\n    let digH3Val = 0\n    let digH4Val = 0\n    let digH5Val = 0\n    let digH6Val = 0\n\n    // Buffer to hold pressure compensation values to pass to the C++ compensation function\n    let digPBuf: Buffer\n\n    // BME Compensation Parameter Addresses for Temperature\n    const digT1 = 0x88\n    const digT2 = 0x8A\n    const digT3 = 0x8C\n\n    // BME Compensation Parameter Addresses for Pressure\n    const digP1 = 0x8E\n    const digP2 = 0x90\n    const digP3 = 0x92\n    const digP4 = 0x94\n    const digP5 = 0x96\n    const digP6 = 0x98\n    const digP7 = 0x9A\n    const digP8 = 0x9C\n    const digP9 = 0x9E\n\n    // BME Compensation Parameter Addresses for Humidity\n    const digH1 = 0xA1\n    const digH2 = 0xE1\n    const digH3 = 0xE3\n    const e5Reg = 0xE5\n    const e4Reg = 0xE4\n    const e6Reg = 0xE6\n    const digH6 = 0xE7\n\n    setreg(0xF2, 0x04)\n    setreg(0xF4, 0x2F)\n    setreg(0xF5, 0x0C)\n    setreg(0xF4, 0x2F)\n\n    function getBME280(): void {\n        let adc_T = (getreg(0xFA) << 12) + (getreg(0xFB) << 4) + (getreg(0xFC) >> 4)\n        let var1 = (((adc_T >> 3) - (dig_T1 << 1)) * dig_T2) >> 11\n        let var2 = (((((adc_T >> 4) - dig_T1) * ((adc_T >> 4) - dig_T1)) >> 12) * dig_T3) >> 14\n        let t = var1 + var2\n        TEMPERATURE = ((t * 5 + 128) >> 8) / 100\n        var1 = (t >> 1) - 64000\n        var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6\n        var2 = var2 + ((var1 * dig_P5) << 1)\n        var2 = (var2 >> 2) + (dig_P4 << 16)\n        var1 = (((dig_P3 * ((var1 >> 2) * (var1 >> 2)) >> 13) >> 3) + (((dig_P2) * var1) >> 1)) >> 18\n        var1 = ((32768 + var1) * dig_P1) >> 15\n        if (var1 == 0)\n            return; // avoid exception caused by division by zero\n        let adc_P = (getreg(0xF7) << 12) + (getreg(0xF8) << 4) + (getreg(0xF9) >> 4)\n        let _p = ((1048576 - adc_P) - (var2 >> 12)) * 3125\n        _p = (_p / var1) * 2;\n        var1 = (dig_P9 * (((_p >> 3) * (_p >> 3)) >> 13)) >> 12\n        var2 = (((_p >> 2)) * dig_P8) >> 13\n        PRESSURE = _p + ((var1 + var2 + dig_P7) >> 4)\n        let adc_H = (getreg(0xFD) << 8) + getreg(0xFE)\n        var1 = t - 76800\n        var2 = (((adc_H << 14) - (dig_H4 << 20) - (dig_H5 * var1)) + 16384) >> 15\n        var1 = var2 * (((((((var1 * dig_H6) >> 10) * (((var1 * dig_H3) >> 11) + 32768)) >> 10) + 2097152) * dig_H2 + 8192) >> 14)\n        var2 = var1 - (((((var1 >> 15) * (var1 >> 15)) >> 7) * dig_H1) >> 4)\n        if (var2 < 0) var2 = 0\n        if (var2 > 419430400) var2 = 419430400\n        HUMIDITY = (var2 >> 12) / 1024\n    }\n\n    ////////////\n    ////////////"],[0,"\n\n  "]],"start1":364,"start2":364,"length1":4557,"length2":8}]}]},{"timestamp":1738786597993,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"//\n\n"],[-1,"    /*\n    The BME280 code is taken from the Ele\n    */\n\n"],[0,"    "]],"start1":412,"start2":412,"length1":65,"length2":8}]}]},{"timestamp":1738786687420,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," Ele"],[-1,"cFreaks "],[0,"\n   "]],"start1":460,"start2":460,"length1":16,"length2":8}]}]},{"timestamp":1738787381089,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"aks "],[-1,"Evn"],[0,"\n   "]],"start1":468,"start2":468,"length1":11,"length2":8}]}]},{"timestamp":1738787384143,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":111}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"aks "],[-1,"'environment.ts' library:\n    https://github.com/elecfreaks/pxt-iot-environment-kit/blob/master/environment.ts\n    (MIT-license)"],[1,"Evn"],[0,"\n   "]],"start1":468,"start2":468,"length1":136,"length2":11},{"diffs":[[0,"ck=\""],[-1,"wait %time sec\"\n    //% block.loc.nl=\"wacht %time sec\"\n    export function waitSec(time: number) {\n        basic.pause(time * 1000);\n    }\n\n    //% block=\"wait %time min\"\n    //% block.loc.nl=\"wacht %time min\"\n    export function waitMin(time: number) {\n        basic.pause(time * 60000);\n    }\n\n    //% block=\"wait %time hours\"\n    //% block.loc.nl=\"wacht %time uren\"\n    export function waitHours(time: number) {\n        basic.pause(time * 3600000);"],[1,"perform a measurement\"\n    //% block.loc.nl = \"voer een meting uit\"\n    function measure() {"],[0,"\n    "],[-1,"}\n\n"],[0,"    "],[-1,"//% block=\"perform a measurement\"\n    //% block.loc.nl = \"voer een meting uit\"\n    function measure() {"],[1,"let value: number"],[0,"\n   "]],"start1":4998,"start2":4998,"length1":574,"length2":126},{"diffs":[[0,"ber\n        "],[-1,"let "],[0,"value = pins"]],"start1":5117,"start2":5117,"length1":28,"length2":24},{"diffs":[[0,"ue)\n"],[-1,"        getBME280()\n"],[0,"    "]],"start1":5225,"start2":5225,"length1":28,"length2":8}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":233,"start2":233,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests gaan hier; deze zal niet worden gecompileerd wanneer dit pakket wordt gebruikt als extensie.\n"}]}],"snapshots":[{"timestamp":1738766294536,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"pxt-greenhouse\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1738784034686,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"225\" y=\"20\"></block></xml>","main.ts":"","README.md":"","pxt.json":"{\n    \"name\": \"pxt-greenhouse\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1738785996711,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"//% color=\"#00CC00\" icon=\"\\uf1f9\"\n//% block=\"BreedingBox\"\n//% block.loc.nl=\"Kweekbakje\"\nnamespace CBreedingBox {\n\n    let PIN_LIGHT = DigitalPin.P0\n    let PIN_SDA = DigitalPin.P0\n    let PIN_SCL = DigitalPin.P0\n\n    let MOISTURE : number = 0\n    let HUMIDITY : number = 0\n    let TEMPERATURE : number = 0\n    let LIGHT : number = 0\n    let PRESSURE : number = 0\n\n    //% block=\"perform a measurement\"\n    //% block.loc.nl = \"voer een meting uit\"\n    function measure() {\n        let value: number\n        value = pins.map(pins.analogReadPin(PIN_LIGHT), 0, 1023, 0, 100);\n        LIGHT = Math.round(value)\n    }\n\n    //% block=\"moisture\"\n    //% block.loc.nl = \"grondvochtigheid\"\n    function moisture(): number {\n        return MOISTURE\n    }\n\n    //% block=\"humidity\"\n    //% block.loc.nl = \"luchtvochtigheid\"\n    function humidity(): number {\n        return HUMIDITY\n    }\n\n    //% block=\"temperature\"\n    //% block.loc.nl = \"temperatuur\"\n    function temperature(): number {\n        return TEMPERATURE\n    }\n\n    //% block=\"amount of light\"\n    //% block.loc.nl = \"hoeveelheid licht\"\n    function light(): number {\n        return LIGHT\n    }\n\n    //% block=\"air pressure\"\n    //% block.loc.nl = \"luchtdruk\"\n    function pressure(): number {\n        return PRESSURE\n    }\n\n}","README.md":"","pxt.json":"{\n    \"name\": \"pxt-greenhouse\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1738787951278,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"205\" y=\"0\"></block></xml>","main.ts":"//% color=\"#00CC00\" icon=\"\\uf1f9\"\n//% block=\"BreedingBox\"\n//% block.loc.nl=\"Kweekbakje\"\nnamespace CBreedingBox {\n\n    let PIN_LIGHT = DigitalPin.P0\n    let PIN_SDA = DigitalPin.P0\n    let PIN_SCL = DigitalPin.P0\n\n    let MOISTURE : number = 0\n    let HUMIDITY : number = 0\n    let TEMPERATURE : number = 0\n    let LIGHT : number = 0\n    let PRESSURE : number = 0\n\n    ////////////\n    // BME280 //\n    ////////////\n\n    /*\n    The BME280 code is taken from the ElecFreaks 'environment.ts' library:\n    https://github.com/elecfreaks/pxt-iot-environment-kit/blob/master/environment.ts\n    (MIT-license)\n    */\n\n    function setreg(reg: number, dat: number): void {\n        let buf = pins.createBuffer(2);\n        buf[0] = reg;\n        buf[1] = dat;\n        pins.i2cWriteBuffer(BME280_I2C_ADDR, buf);\n    }\n\n    function getreg(reg: number): number {\n        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);\n        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.UInt8BE);\n    }\n\n    function getInt8LE(reg: number): number {\n        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);\n        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.Int8LE);\n    }\n\n    function getUInt16LE(reg: number): number {\n        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);\n        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.UInt16LE);\n    }\n\n    function getInt16LE(reg: number): number {\n        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);\n        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.Int16LE);\n    }\n\n    let BME280_I2C_ADDR = 0x76\n\n    let dig_T1 = getUInt16LE(0x88)\n    let dig_T2 = getInt16LE(0x8A)\n    let dig_T3 = getInt16LE(0x8C)\n    let dig_P1 = getUInt16LE(0x8E)\n    let dig_P2 = getInt16LE(0x90)\n    let dig_P3 = getInt16LE(0x92)\n    let dig_P4 = getInt16LE(0x94)\n    let dig_P5 = getInt16LE(0x96)\n    let dig_P6 = getInt16LE(0x98)\n    let dig_P7 = getInt16LE(0x9A)\n    let dig_P8 = getInt16LE(0x9C)\n    let dig_P9 = getInt16LE(0x9E)\n\n    let dig_H1 = getreg(0xA1)\n    let dig_H2 = getInt16LE(0xE1)\n    let dig_H3 = getreg(0xE3)\n    let a = getreg(0xE5)\n    let dig_H4 = (getreg(0xE4) << 4) + (a % 16)\n    let dig_H5 = (getreg(0xE6) << 4) + (a >> 4)\n    let dig_H6 = getInt8LE(0xE7)\n\n    // Stores compensation values for Temperature (must be read from BME280 NVM)\n    let digT1Val = 0\n    let digT2Val = 0\n    let digT3Val = 0\n\n    // Stores compensation values for humidity (must be read from BME280 NVM)\n    let digH1Val = 0\n    let digH2Val = 0\n    let digH3Val = 0\n    let digH4Val = 0\n    let digH5Val = 0\n    let digH6Val = 0\n\n    // Buffer to hold pressure compensation values to pass to the C++ compensation function\n    let digPBuf: Buffer\n\n    // BME Compensation Parameter Addresses for Temperature\n    const digT1 = 0x88\n    const digT2 = 0x8A\n    const digT3 = 0x8C\n\n    // BME Compensation Parameter Addresses for Pressure\n    const digP1 = 0x8E\n    const digP2 = 0x90\n    const digP3 = 0x92\n    const digP4 = 0x94\n    const digP5 = 0x96\n    const digP6 = 0x98\n    const digP7 = 0x9A\n    const digP8 = 0x9C\n    const digP9 = 0x9E\n\n    // BME Compensation Parameter Addresses for Humidity\n    const digH1 = 0xA1\n    const digH2 = 0xE1\n    const digH3 = 0xE3\n    const e5Reg = 0xE5\n    const e4Reg = 0xE4\n    const e6Reg = 0xE6\n    const digH6 = 0xE7\n\n    setreg(0xF2, 0x04)\n    setreg(0xF4, 0x2F)\n    setreg(0xF5, 0x0C)\n    setreg(0xF4, 0x2F)\n\n    function getBME280(): void {\n        let adc_T = (getreg(0xFA) << 12) + (getreg(0xFB) << 4) + (getreg(0xFC) >> 4)\n        let var1 = (((adc_T >> 3) - (dig_T1 << 1)) * dig_T2) >> 11\n        let var2 = (((((adc_T >> 4) - dig_T1) * ((adc_T >> 4) - dig_T1)) >> 12) * dig_T3) >> 14\n        let t = var1 + var2\n        TEMPERATURE = ((t * 5 + 128) >> 8) / 100\n        var1 = (t >> 1) - 64000\n        var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6\n        var2 = var2 + ((var1 * dig_P5) << 1)\n        var2 = (var2 >> 2) + (dig_P4 << 16)\n        var1 = (((dig_P3 * ((var1 >> 2) * (var1 >> 2)) >> 13) >> 3) + (((dig_P2) * var1) >> 1)) >> 18\n        var1 = ((32768 + var1) * dig_P1) >> 15\n        if (var1 == 0)\n            return; // avoid exception caused by division by zero\n        let adc_P = (getreg(0xF7) << 12) + (getreg(0xF8) << 4) + (getreg(0xF9) >> 4)\n        let _p = ((1048576 - adc_P) - (var2 >> 12)) * 3125\n        _p = (_p / var1) * 2;\n        var1 = (dig_P9 * (((_p >> 3) * (_p >> 3)) >> 13)) >> 12\n        var2 = (((_p >> 2)) * dig_P8) >> 13\n        PRESSURE = _p + ((var1 + var2 + dig_P7) >> 4)\n        let adc_H = (getreg(0xFD) << 8) + getreg(0xFE)\n        var1 = t - 76800\n        var2 = (((adc_H << 14) - (dig_H4 << 20) - (dig_H5 * var1)) + 16384) >> 15\n        var1 = var2 * (((((((var1 * dig_H6) >> 10) * (((var1 * dig_H3) >> 11) + 32768)) >> 10) + 2097152) * dig_H2 + 8192) >> 14)\n        var2 = var1 - (((((var1 >> 15) * (var1 >> 15)) >> 7) * dig_H1) >> 4)\n        if (var2 < 0) var2 = 0\n        if (var2 > 419430400) var2 = 419430400\n        HUMIDITY = (var2 >> 12) / 1024\n    }\n\n    ////////////\n    ////////////\n\n    //% block=\"wait %time sec\"\n    //% block.loc.nl=\"wacht %time sec\"\n    export function waitSec(time: number) {\n        basic.pause(time * 1000);\n    }\n\n    //% block=\"wait %time min\"\n    //% block.loc.nl=\"wacht %time min\"\n    export function waitMin(time: number) {\n        basic.pause(time * 60000);\n    }\n\n    //% block=\"wait %time hours\"\n    //% block.loc.nl=\"wacht %time uren\"\n    export function waitHours(time: number) {\n        basic.pause(time * 3600000);\n    }\n\n    //% block=\"perform a measurement\"\n    //% block.loc.nl = \"voer een meting uit\"\n    function measure() {\n        let value = pins.map(pins.analogReadPin(PIN_LIGHT), 0, 1023, 0, 100);\n        LIGHT = Math.round(value)\n        getBME280()\n    }\n\n    //% block=\"moisture\"\n    //% block.loc.nl = \"grondvochtigheid\"\n    function moisture(): number {\n        return MOISTURE\n    }\n\n    //% block=\"humidity\"\n    //% block.loc.nl = \"luchtvochtigheid\"\n    function humidity(): number {\n        return HUMIDITY\n    }\n\n    //% block=\"temperature\"\n    //% block.loc.nl = \"temperatuur\"\n    function temperature(): number {\n        return TEMPERATURE\n    }\n\n    //% block=\"amount of light\"\n    //% block.loc.nl = \"hoeveelheid licht\"\n    function light(): number {\n        return LIGHT\n    }\n\n    //% block=\"air pressure\"\n    //% block.loc.nl = \"luchtdruk\"\n    function pressure(): number {\n        return PRESSURE\n    }\n\n}","README.md":"","pxt.json":"{\n    \"name\": \"pxt-greenhouse\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1738787951287}