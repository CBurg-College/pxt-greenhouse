<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="/Ns.F~P!{!aNrb]5`$_1" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="IL~=/k1:Hl7)6PnZGIoq"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace ESP8266 {" line1="    /*" line2="    The ESP8266 code is copied from the ElecFreaks 'esp8266-iot.ts' library:" line3="    https://github.com/elecfreaks/pxt-iot-environment-kit/blob/master/esp8266-iot.ts" line4="    (MIT-license)" line5="    */" line6="" line7="    enum Cmd {" line8="        None," line9="        ConnectWifi," line10="        ConnectThingSpeak," line11="        ConnectSmartIot," line12="        InitSmartIot," line13="        UploadSmartIot," line14="        DisconnectSmartIot," line15="        ConnectMqtt," line16="    }" line17="" line18="    export enum SmartIotSwitchState {" line19="        //% block=&quot;on&quot;" line20="        on = 1," line21="        //% block=&quot;off&quot;" line22="        off = 2" line23="    }" line24="" line25="    export enum SchemeList {" line26="        //% block=&quot;TCP&quot;" line27="        TCP = 1," line28="        //% block=&quot;TLS&quot;" line29="        TLS = 2" line30="    }" line31="" line32="    export enum QosList {" line33="        //% block=&quot;0&quot;" line34="        Qos0 = 0," line35="        //% block=&quot;1&quot;" line36="        Qos1," line37="        //% block=&quot;2&quot;" line38="        Qos2" line39="    }" line40="" line41="    let wifi_connected: boolean = false" line42="    let thingspeak_connected: boolean = false" line43="    let smartiot_connected: boolean = false" line44="    let mqttBrokerConnected: boolean = false" line45="    let userToken_def: string = &quot;&quot;" line46="    let topic_def: string = &quot;&quot;" line47="    const mqttSubscribeHandlers: { [topic: string]: (message: string) =&gt; void } = {}" line48="    const mqttSubscribeQos: { [topic: string]: number } = {}" line49="    let mqtthost_def = &quot;ELECFREAKS&quot;" line50="    let iftttkey_def = &quot;&quot;" line51="    let iftttevent_def = &quot;&quot;" line52="    let thingSpeakDatatemp = &quot;&quot;" line53="" line54="    let serialCnt = 0" line55="    let recvString = &quot;&quot;" line56="    let scanWIFIAPFlag = 0" line57="    let currentCmd: Cmd = Cmd.None" line58="" line59="    const THINGSPEAK_HOST = &quot;api.thingspeak.com&quot;" line60="    const THINGSPEAK_PORT = &quot;80&quot;" line61="    const SMARTIOT_HOST = &quot;47.239.108.37&quot;" line62="    const SMARTIOT_PORT = &quot;8081&quot;" line63="    // export function change(a:any,b:any){" line64="    //     SMARTIOT_HOST = a" line65="    //     SMARTIOT_PORT = b" line66="    // }" line67="" line68="    const EspEventSource = 3000" line69="    const EspEventValue = {" line70="        None: Cmd.None," line71="        ConnectWifi: Cmd.ConnectWifi," line72="        ConnectThingSpeak: Cmd.ConnectThingSpeak," line73="        ConnectSmartIot: Cmd.ConnectSmartIot," line74="        InitSmartIot: Cmd.InitSmartIot," line75="        UploadSmartIot: Cmd.UploadSmartIot," line76="        DisconnectSmartIot: Cmd.DisconnectSmartIot," line77="        ConnectMqtt: Cmd.ConnectMqtt," line78="        PostIFTTT: 255" line79="    }" line80="    const SmartIotEventSource = 3100" line81="    const SmartIotEventValue = {" line82="        switchOn: SmartIotSwitchState.on," line83="        switchOff: SmartIotSwitchState.off" line84="    }" line85="" line86="    let TStoSendStr = &quot;&quot;" line87="" line88="    // write AT command with CR+LF ending" line89="    function sendAT(command: string, wait: number = 0) {" line90="        serial.writeString(`${command}\u000D\u000A`)" line91="        basic.pause(wait)" line92="    }" line93="" line94="    function restEsp8266() {" line95="        sendAT(&quot;AT+RESTORE&quot;, 1000) // restore to factory settings" line96="        sendAT(&quot;AT+RST&quot;, 1000) // rest" line97="        serial.readString()" line98="        sendAT(&quot;AT+CWMODE=1&quot;, 500) // set to STA mode" line99="        sendAT(&quot;AT+SYSTIMESTAMP=1634953609130&quot;, 100) // Set local timestamp." line100="        sendAT(`AT+CIPSNTPCFG=1,8,&quot;ntp1.aliyun.com&quot;,&quot;0.pool.ntp.org&quot;,&quot;time.google.com&quot;`, 100)" line101="        basic.pause(3000)" line102="    }" line103="" line104="    function scanWIFIAP(ssid: string) {" line105="" line106="        let scanflag = 0" line107="        let mscnt = 0" line108="        recvString = &quot; &quot;" line109="        sendAT(`AT+CWLAPOPT=1,2,-100,255`)" line110="        sendAT(`AT+CWLAP`)" line111="        while (!(scanflag)) {" line112="" line113="            recvString = recvString + serial.readString()" line114="            basic.pause(1)" line115="            mscnt += 1" line116="            if (mscnt &gt;= 3000) {" line117="                scanWIFIAPFlag = 0" line118="                break" line119="            }" line120="" line121="            if (recvString.includes(&quot;+CWLAP:(&quot;)) {" line122="" line123="                mscnt = 0" line124="                recvString = recvString.slice(recvString.indexOf(&quot;+CWLAP:(&quot;))" line125="                scanflag = 1" line126="                while (1) {" line127="" line128="                    recvString += serial.readString()" line129="                    basic.pause(1)" line130="                    mscnt += 1" line131="" line132="                    // OLED.clear()" line133="                    // OLED.writeStringNewLine(_recvString)" line134="                    if (recvString.includes(&quot;OK&quot;) || mscnt &gt;= 3000) {" line135="" line136="                        if (mscnt &gt;= 3000) {" line137="                            scanWIFIAPFlag = 0" line138="                        } else if (recvString.includes(ssid)) {" line139="                            scanWIFIAPFlag = 1" line140="                        } else {" line141="                            scanWIFIAPFlag = 0" line142="                        }" line143="                        break" line144="                    }" line145="                }" line146="            }" line147="" line148="        }" line149="        recvString = &quot; &quot;" line150="    }" line151="" line152="    /**" line153="     * Initialize ESP8266 module" line154="     */" line155="    export function initWIFI(tx: SerialPin, rx: SerialPin, baudrate: BaudRate) {" line156="        serial.redirect(tx, rx, BaudRate.BaudRate115200)" line157="        basic.pause(100)" line158="        serial.setTxBufferSize(128)" line159="        serial.setRxBufferSize(128)" line160="        restEsp8266()" line161="    }" line162="" line163="    /**" line164="     * connect to Wifi router" line165="     */" line166="    export function connectWifi(ssid: string, pw: string) {" line167="" line168="        while (1) {" line169="            scanWIFIAP(ssid)" line170="            if (scanWIFIAPFlag) {" line171="                currentCmd = Cmd.ConnectWifi" line172="                sendAT(`AT+CWJAP=&quot;${ssid}&quot;,&quot;${pw}&quot;`) // connect to Wifi router" line173="                control.waitForEvent(EspEventSource, EspEventValue.ConnectWifi)" line174="                while (!wifi_connected) {" line175="                    restEsp8266()" line176="                    sendAT(`AT+CWJAP=&quot;${ssid}&quot;,&quot;${pw}&quot;`)" line177="                    control.waitForEvent(EspEventSource, EspEventValue.ConnectWifi)" line178="                }" line179="                break" line180="            } else {" line181="                restEsp8266()" line182="                currentCmd = Cmd.ConnectWifi" line183="                sendAT(`AT+CWJAP=&quot;${ssid}&quot;,&quot;${pw}&quot;`)" line184="                control.waitForEvent(EspEventSource, EspEventValue.ConnectWifi)" line185="                if (wifi_connected) {" line186="                    break" line187="                }" line188="            }" line189="        }" line190="    }" line191="" line192="    /**" line193="     * Warning: Deprecated." line194="     * Check if ESP8266 successfully connected to Wifi" line195="     */" line196="    export function wifiState(state: boolean) {" line197="        return wifi_connected === state" line198="    }" line199="" line200="    /**" line201="     * Connect to ThingSpeak" line202="     */" line203="    export function connectThingSpeak() {" line204="        thingspeak_connected = true" line205="        // connect to server" line206="        // recvString = &quot; &quot;" line207="        // serialCnt = 0" line208="        // sendAT(`AT+CIPSTART=&quot;TCP&quot;,&quot;${THINGSPEAK_HOST}&quot;,${THINGSPEAK_PORT}`)" line209="        // currentCmd = Cmd.ConnectThingSpeak" line210="        // basic.pause(1)" line211="        // recvString += serial.readString()" line212="        // if (recvString == &quot; &quot;) {" line213="        //     thingspeak_connected = false" line214="        //     //basic.showIcon(IconNames.Sad)" line215="        // } else {" line216="        //     control.waitForEvent(EspEventSource, EspEventValue.ConnectThingSpeak)" line217="" line218="        // } " line219="    }" line220="" line221="    /**" line222="     * Connect to ThingSpeak and set data." line223="     */" line224="    export function setData(write_api_key: string, n1: number = 0, n2: number = 0, n3: number = 0, n4: number = 0, n5: number = 0, n6: number = 0, n7: number = 0, n8: number = 0) {" line225="        TStoSendStr = &quot;AT+HTTPCLIENT=2,0,\&quot;http://api.thingspeak.com/update?api_key=&quot;" line226="            + write_api_key" line227="            + &quot;&amp;field1=&quot;" line228="            + n1" line229="            + &quot;&amp;field2=&quot;" line230="            + n2" line231="            + &quot;&amp;field3=&quot;" line232="            + n3" line233="            + &quot;&amp;field4=&quot;" line234="            + n4" line235="            + &quot;&amp;field5=&quot;" line236="            + n5" line237="            + &quot;&amp;field6=&quot;" line238="            + n6" line239="            + &quot;&amp;field7=&quot;" line240="            + n7" line241="            + &quot;&amp;field8=&quot;" line242="            + n8" line243="            + &quot;\&quot;,,,1&quot;" line244="    }" line245="" line246="    /**" line247="     * upload data. It would not upload anything if it failed to connect to Wifi or ThingSpeak." line248="     */" line249="    export function uploadData() {" line250="        let mscnt2 = 0" line251="        //sendAT(`AT+CIPSEND=${TStoSendStr.length + 2}`, 300)" line252="        sendAT(TStoSendStr, 100) // upload data" line253="" line254="        while (1) {" line255="" line256="            recvString += serial.readString()" line257="            basic.pause(1)" line258="            mscnt2 += 1" line259="" line260="            // OLED.clear()" line261="            // OLED.writeStringNewLine(_recvString)" line262="            if (recvString.includes(&quot;OK&quot;) || mscnt2 &gt;= 3000 || recvString.includes(&quot;ERROR&quot;)) {" line263="" line264="                break" line265="            }" line266="        }" line267="" line268="        recvString = &quot; &quot;" line269="        basic.pause(200)" line270="    }" line271="" line272="    /*" line273="     * Check if ESP8266 successfully connected to ThingSpeak" line274="     */" line275="    export function thingSpeakState(state: boolean) {" line276="        return thingspeak_connected === state" line277="    }" line278="" line279="    /* ----------------------------------- smartiot ----------------------------------- */" line280="    /*" line281="     * Connect to smartiot" line282="     */" line283="    export function connectSmartiot(userToken: string, topic: string): void {" line284="        userToken_def = userToken" line285="        topic_def = topic" line286="        currentCmd = Cmd.ConnectSmartIot" line287="        sendAT(`AT+CIPSTART=&quot;TCP&quot;,&quot;${SMARTIOT_HOST}&quot;,${SMARTIOT_PORT}`)" line288="        control.waitForEvent(EspEventSource, EspEventValue.ConnectSmartIot)" line289="        pause(100)" line290="        const jsonText = `{&quot;topic&quot;:&quot;${topic}&quot;,&quot;userToken&quot;:&quot;${userToken}&quot;,&quot;op&quot;:&quot;init&quot;}`" line291="        currentCmd = Cmd.InitSmartIot" line292="        sendAT(`AT+CIPSEND=${jsonText.length + 2}`)" line293="        control.waitForEvent(EspEventSource, EspEventValue.InitSmartIot)" line294="        if (smartiot_connected) {" line295="            sendAT(jsonText)" line296="            control.waitForEvent(EspEventSource, EspEventValue.InitSmartIot)" line297="        }" line298="        pause(1500)" line299="    }" line300="" line301="    /**" line302="     * upload data to smartiot" line303="     */" line304="    export function uploadSmartiot(data: number): void {" line305="        data = Math.floor(data)" line306="        const jsonText2 = `{&quot;topic&quot;:&quot;${topic_def}&quot;,&quot;userToken&quot;:&quot;${userToken_def}&quot;,&quot;op&quot;:&quot;up&quot;,&quot;data&quot;:&quot;${data}&quot;}`" line307="        currentCmd = Cmd.UploadSmartIot" line308="        sendAT(`AT+CIPSEND=${jsonText2.length + 2}`)" line309="        control.waitForEvent(EspEventSource, EspEventValue.UploadSmartIot)" line310="        if (smartiot_connected) {" line311="            sendAT(jsonText2)" line312="            control.waitForEvent(EspEventSource, EspEventValue.UploadSmartIot)" line313="        }" line314="        pause(1500)" line315="    }" line316="" line317="    /*" line318="     * disconnect from smartiot" line319="     */" line320="    export function disconnectSmartiot(): void {" line321="        if (smartiot_connected) {" line322="            const jsonText3 = `{&quot;topic&quot;:&quot;${topic_def}&quot;,&quot;userToken&quot;:&quot;${userToken_def}&quot;,&quot;op&quot;:&quot;close&quot;}`" line323="            currentCmd = Cmd.DisconnectSmartIot" line324="            sendAT(&quot;AT+CIPSEND=&quot; + (jsonText3.length + 2))" line325="            control.waitForEvent(EspEventSource, EspEventValue.DisconnectSmartIot)" line326="            if (smartiot_connected) {" line327="                sendAT(jsonText3)" line328="                control.waitForEvent(EspEventSource, EspEventValue.DisconnectSmartIot)" line329="            }" line330="            pause(1500)" line331="        }" line332="    }" line333="" line334="    /*" line335="     * Check if ESP8266 successfully connected to SmartIot" line336="     */" line337="    export function smartiotState(state: boolean) {" line338="        return smartiot_connected === state" line339="    }" line340="" line341="    export function iotSwitchEvent(state: SmartIotSwitchState, handler: () =&gt; void) {" line342="        control.onEvent(SmartIotEventSource, state, handler)" line343="    }" line344="" line345="    /*----------------------------------MQTT-----------------------*/" line346="    /*" line347="     * Set  MQTT client" line348="     */" line349="    export function setMQTT(scheme: SchemeList, clientID: string, username: string, password: string, path: string): void {" line350="        sendAT(`AT+MQTTUSERCFG=0,${scheme},&quot;${clientID}&quot;,&quot;${username}&quot;,&quot;${password}&quot;,0,0,&quot;${path}&quot;`, 1000)" line351="    }" line352="" line353="    /*" line354="     * Connect to MQTT broker" line355="     */" line356="    export function connectMQTT(host: string, port: number, reconnect: boolean): void {" line357="        mqtthost_def = host" line358="        const rec = reconnect ? 0 : 1" line359="        currentCmd = Cmd.ConnectMqtt" line360="        sendAT(`AT+MQTTCONN=0,&quot;${host}&quot;,${port},${rec}`)" line361="        control.waitForEvent(EspEventSource, EspEventValue.ConnectMqtt)" line362="        Object.keys(mqttSubscribeQos).forEach(topic =&gt; {" line363="            const qos = mqttSubscribeQos[topic]" line364="            sendAT(`AT+MQTTSUB=0,&quot;${topic}&quot;,${qos}`, 1000)" line365="        })" line366="    }" line367="" line368="    /*" line369="     * Check if ESP8266 successfully connected to mqtt broker" line370="     */" line371="    export function isMqttBrokerConnected() {" line372="        return mqttBrokerConnected" line373="    }" line374="" line375="    /*" line376="     * send message" line377="     */" line378="    export function publishMqttMessage(msg: string, topic: string, qos: QosList): void {" line379="        sendAT(`AT+MQTTPUB=0,&quot;${topic}&quot;,&quot;${msg}&quot;,${qos},0`, 1000)" line380="        recvString = &quot;&quot;" line381="    }" line382="" line383="    /*" line384="     * disconnect MQTT broker" line385="     */" line386="    export function breakMQTT(): void {" line387="        sendAT(&quot;AT+MQTTCLEAN=0&quot;, 1000)" line388="    }" line389="" line390="    export function MqttEvent(topic: string, qos: QosList, handler: (message: string) =&gt; void) {" line391="        mqttSubscribeHandlers[topic] = handler" line392="        mqttSubscribeQos[topic] = qos" line393="    }" line394="" line395="    ////////// ----------------------------------- IFTTT ----------------------------------- //////////" line396="    /*" line397="     * set ifttt" line398="     */" line399="    export function setIFTTT(key: string, event: string): void {" line400="        iftttkey_def = key" line401="        iftttevent_def = event" line402="    }" line403="" line404="    /*" line405="     * post ifttt" line406="     */" line407="    export function postIFTTT(value1: string, value2: string, value3: string): void {" line408="        let sendST1 = &quot;AT+HTTPCLIENT=3,1,\&quot;http://maker.ifttt.com/trigger/&quot; + iftttevent_def + &quot;/with/key/&quot; + iftttkey_def + &quot;\&quot;,,,2,&quot;" line409="        let sendST2 = &quot;\&quot;{\\\&quot;value1\\\&quot;:\\\&quot;&quot; + value1 + &quot;\\\&quot;\\\,\\\&quot;value2\\\&quot;:\\\&quot;&quot; + value2 + &quot;\\\&quot;\\\,\\\&quot;value3\\\&quot;:\\\&quot;&quot; + value3 + &quot;\\\&quot;}\&quot;&quot;" line410="        let sendST = sendST1 + sendST2" line411="        sendAT(sendST, 1000)" line412="        //control.waitForEvent(EspEventSource, EspEventValue.PostIFTTT)" line413="    }" line414="" line415="    /*" line416="     * on serial received data" line417="     */" line418="    serial.onDataReceived(serial.delimiters(Delimiters.NewLine), function () {" line419="        recvString += serial.readString()" line420="        pause(1)" line421="        serialCnt += 1" line422="" line423="        // received smart iot data" line424="        if (recvString.includes(&quot;switchoff&quot;)) {" line425="            recvString = &quot;&quot;" line426="            control.raiseEvent(SmartIotEventSource, SmartIotEventValue.switchOff)" line427="        } else if (recvString.includes(&quot;switchon&quot;)) {" line428="            recvString = &quot;&quot;" line429="            control.raiseEvent(SmartIotEventSource, SmartIotEventValue.switchOn)" line430="        }" line431="" line432="        if (recvString.includes(&quot;MQTTSUBRECV&quot;)) {" line433="            recvString = recvString.slice(recvString.indexOf(&quot;MQTTSUBRECV&quot;))" line434="            const recvStringSplit = recvString.split(&quot;,&quot;, 4)" line435="            const topic = recvStringSplit[1].slice(1, -1)" line436="            const message = recvStringSplit[3].slice(0, -2)" line437="            mqttSubscribeHandlers[topic] &amp;&amp; mqttSubscribeHandlers[topic](message)" line438="            recvString = &quot;&quot;" line439="        }" line440="" line441="        if (recvString.includes(&quot;Congratu&quot;)) {" line442="            recvString = &quot;&quot;" line443="            control.raiseEvent(EspEventSource, EspEventValue.PostIFTTT)" line444="        }" line445="" line446="        switch (currentCmd) {" line447="            case Cmd.ConnectWifi:" line448="                if (recvString.includes(&quot;AT+CWJAP&quot;)) {" line449="                    recvString = recvString.slice(recvString.indexOf(&quot;AT+CWJAP&quot;))" line450="                    if (recvString.includes(&quot;WIFI GOT IP&quot;)) {" line451="                        wifi_connected = true" line452="                        recvString = &quot;&quot;" line453="                        control.raiseEvent(EspEventSource, EspEventValue.ConnectWifi)" line454="                    } else if (recvString.includes(&quot;ERROR&quot;)) {" line455="                        wifi_connected = false" line456="                        recvString = &quot;&quot;" line457="                        control.raiseEvent(EspEventSource, EspEventValue.ConnectWifi)" line458="                    }" line459="                }" line460="                break" line461="            case Cmd.ConnectThingSpeak:" line462="                if (recvString.includes(THINGSPEAK_HOST)) {" line463="                    recvString = recvString.slice(recvString.indexOf(THINGSPEAK_HOST))" line464="                    if (recvString.includes(&quot;CONNECT&quot;)) {" line465="                        thingspeak_connected = true" line466="                        recvString = &quot;&quot;" line467="                        control.raiseEvent(EspEventSource, EspEventValue.ConnectThingSpeak)" line468="                    } else if (recvString.includes(&quot;ERROR&quot;)) {" line469="                        thingspeak_connected = false" line470="                        recvString = &quot;&quot;" line471="                        control.raiseEvent(EspEventSource, EspEventValue.ConnectThingSpeak)" line472="                    }" line473="                } else if (recvString.includes(&quot;WIFI GOT IP&quot;)) {" line474="                    thingspeak_connected = false" line475="                    recvString = &quot;&quot;" line476="                    control.raiseEvent(EspEventSource, EspEventValue.ConnectThingSpeak)" line477="                }" line478="                break" line479="            case Cmd.ConnectSmartIot:" line480="                if (recvString.includes(SMARTIOT_HOST)) {" line481="                    recvString = recvString.slice(recvString.indexOf(SMARTIOT_HOST))" line482="                    if (recvString.includes(&quot;CONNECT&quot;)) {" line483="                        smartiot_connected = true" line484="                        recvString = &quot;&quot;" line485="                        control.raiseEvent(EspEventSource, EspEventValue.ConnectSmartIot)" line486="                    } else if (recvString.includes(&quot;ERROR&quot;)) {" line487="                        smartiot_connected = false" line488="                        recvString = &quot;&quot;" line489="                        control.raiseEvent(EspEventSource, EspEventValue.ConnectSmartIot)" line490="                    }" line491="                }" line492="                break" line493="            case Cmd.InitSmartIot:" line494="                if (recvString.includes(&quot;AT+CIPSEND&quot;)) {" line495="                    recvString = recvString.slice(recvString.indexOf(&quot;AT+CIPSEND&quot;))" line496="                    if (recvString.includes(&quot;OK&quot;)) {" line497="                        smartiot_connected = true" line498="                        recvString = &quot;&quot;" line499="                        control.raiseEvent(EspEventSource, EspEventValue.InitSmartIot)" line500="                    } else if (recvString.includes(&quot;ERROR&quot;)) {" line501="                        smartiot_connected = false" line502="                        recvString = &quot;&quot;" line503="                        control.raiseEvent(EspEventSource, EspEventValue.InitSmartIot)" line504="                    }" line505="                } else {" line506="                    if (recvString.includes(&quot;SEND OK&quot;)) {" line507="                        smartiot_connected = true" line508="                        recvString = &quot;&quot;" line509="                        control.raiseEvent(EspEventSource, EspEventValue.InitSmartIot)" line510="                    } else if (recvString.includes(&quot;ERROR&quot;)) {" line511="                        smartiot_connected = false" line512="                        recvString = &quot;&quot;" line513="                        control.raiseEvent(EspEventSource, EspEventValue.InitSmartIot)" line514="                    }" line515="                }" line516="                break" line517="            case Cmd.UploadSmartIot:" line518="                if (recvString.includes(&quot;AT+CIPSEND&quot;)) {" line519="                    recvString = recvString.slice(recvString.indexOf(&quot;AT+CIPSEND&quot;))" line520="                    if (recvString.includes(&quot;OK&quot;)) {" line521="                        smartiot_connected = true" line522="                        recvString = &quot;&quot;" line523="                        control.raiseEvent(EspEventSource, EspEventValue.UploadSmartIot)" line524="                    } else if (recvString.includes(&quot;ERROR&quot;)) {" line525="                        smartiot_connected = false" line526="                        recvString = &quot;&quot;" line527="                        control.raiseEvent(EspEventSource, EspEventValue.UploadSmartIot)" line528="                    }" line529="                } else {" line530="                    if (recvString.includes(&quot;SEND OK&quot;)) {" line531="                        smartiot_connected = true" line532="                        recvString = &quot;&quot;" line533="                        control.raiseEvent(EspEventSource, EspEventValue.UploadSmartIot)" line534="                    } else if (recvString.includes(&quot;ERROR&quot;)) {" line535="                        smartiot_connected = false" line536="                        recvString = &quot;&quot;" line537="                        control.raiseEvent(EspEventSource, EspEventValue.UploadSmartIot)" line538="                    }" line539="                }" line540="                break" line541="            case Cmd.DisconnectSmartIot:" line542="                if (recvString.includes(&quot;AT+CIPSEND&quot;)) {" line543="                    recvString = recvString.slice(recvString.indexOf(&quot;AT+CIPSEND&quot;))" line544="                    if (recvString.includes(&quot;OK&quot;)) {" line545="                        smartiot_connected = true" line546="                        recvString = &quot;&quot;" line547="                        control.raiseEvent(EspEventSource, EspEventValue.DisconnectSmartIot)" line548="                    } else if (recvString.includes(&quot;ERROR&quot;)) {" line549="                        smartiot_connected = false" line550="                        recvString = &quot;&quot;" line551="                        control.raiseEvent(EspEventSource, EspEventValue.DisconnectSmartIot)" line552="                    }" line553="                } else {" line554="                    if (recvString.includes(&quot;SEND OK&quot;)) {" line555="                        smartiot_connected = false" line556="                        recvString = &quot;&quot;" line557="                        control.raiseEvent(EspEventSource, EspEventValue.DisconnectSmartIot)" line558="                    } else if (recvString.includes(&quot;ERROR&quot;)) {" line559="                        smartiot_connected = false" line560="                        recvString = &quot;&quot;" line561="                        control.raiseEvent(EspEventSource, EspEventValue.DisconnectSmartIot)" line562="                    }" line563="                }" line564="                break" line565="            case Cmd.ConnectMqtt:" line566="                if (recvString.includes(mqtthost_def)) {" line567="                    recvString = recvString.slice(recvString.indexOf(mqtthost_def))" line568="                    if (recvString.includes(&quot;OK&quot;)) {" line569="                        mqttBrokerConnected = true" line570="                        recvString = &quot;&quot;" line571="                        control.raiseEvent(EspEventSource, EspEventValue.ConnectMqtt)" line572="                    } else if (recvString.includes(&quot;ERROR&quot;)) {" line573="                        mqttBrokerConnected = false" line574="                        recvString = &quot;&quot;" line575="                        control.raiseEvent(EspEventSource, EspEventValue.ConnectMqtt)" line576="                    }" line577="                }" line578="                break" line579="        }" line580="    })" line581="}" numlines="582"></mutation><next><block type="typescript_statement" id=":K0rI1!.6gqumP/bo+%{"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace CBreedingBox {" line1="" line2="    let PIN_LIGHT = DigitalPin.P1" line3="" line4="    export let MOISTURE : number = 0" line5="    export let HUMIDITY : number = 0" line6="    export let TEMPERATURE : number = 0" line7="    export let LIGHT : number = 0" line8="    export let PRESSURE : number = 0" line9="" line10="    ////////////" line11="    // BME280 //" line12="    ////////////" line13="" line14="    /*" line15="    The BME280 code is taken from the ElecFreaks 'environment.ts' library:" line16="    https://github.com/elecfreaks/pxt-iot-environment-kit/blob/master/environment.ts" line17="    (MIT-license)" line18="    */" line19="" line20="    function setreg(reg: number, dat: number): void {" line21="        let buf = pins.createBuffer(2);" line22="        buf[0] = reg;" line23="        buf[1] = dat;" line24="        pins.i2cWriteBuffer(BME280_I2C_ADDR, buf);" line25="    }" line26="" line27="    function getreg(reg: number): number {" line28="        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);" line29="        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.UInt8BE);" line30="    }" line31="" line32="    function getInt8LE(reg: number): number {" line33="        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);" line34="        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.Int8LE);" line35="    }" line36="" line37="    function getUInt16LE(reg: number): number {" line38="        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);" line39="        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.UInt16LE);" line40="    }" line41="" line42="    function getInt16LE(reg: number): number {" line43="        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);" line44="        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.Int16LE);" line45="    }" line46="" line47="    let BME280_I2C_ADDR = 0x76" line48="" line49="    let dig_T1 = getUInt16LE(0x88)" line50="    let dig_T2 = getInt16LE(0x8A)" line51="    let dig_T3 = getInt16LE(0x8C)" line52="    let dig_P1 = getUInt16LE(0x8E)" line53="    let dig_P2 = getInt16LE(0x90)" line54="    let dig_P3 = getInt16LE(0x92)" line55="    let dig_P4 = getInt16LE(0x94)" line56="    let dig_P5 = getInt16LE(0x96)" line57="    let dig_P6 = getInt16LE(0x98)" line58="    let dig_P7 = getInt16LE(0x9A)" line59="    let dig_P8 = getInt16LE(0x9C)" line60="    let dig_P9 = getInt16LE(0x9E)" line61="" line62="    let dig_H1 = getreg(0xA1)" line63="    let dig_H2 = getInt16LE(0xE1)" line64="    let dig_H3 = getreg(0xE3)" line65="    let a = getreg(0xE5)" line66="    let dig_H4 = (getreg(0xE4) &lt;&lt; 4) + (a % 16)" line67="    let dig_H5 = (getreg(0xE6) &lt;&lt; 4) + (a &gt;&gt; 4)" line68="    let dig_H6 = getInt8LE(0xE7)" line69="" line70="    // Stores compensation values for Temperature (must be read from BME280 NVM)" line71="    let digT1Val = 0" line72="    let digT2Val = 0" line73="    let digT3Val = 0" line74="" line75="    // Stores compensation values for humidity (must be read from BME280 NVM)" line76="    let digH1Val = 0" line77="    let digH2Val = 0" line78="    let digH3Val = 0" line79="    let digH4Val = 0" line80="    let digH5Val = 0" line81="    let digH6Val = 0" line82="" line83="    // Buffer to hold pressure compensation values to pass to the C++ compensation function" line84="    let digPBuf: Buffer" line85="" line86="    // BME Compensation Parameter Addresses for Temperature" line87="    const digT1 = 0x88" line88="    const digT2 = 0x8A" line89="    const digT3 = 0x8C" line90="" line91="    // BME Compensation Parameter Addresses for Pressure" line92="    const digP1 = 0x8E" line93="    const digP2 = 0x90" line94="    const digP3 = 0x92" line95="    const digP4 = 0x94" line96="    const digP5 = 0x96" line97="    const digP6 = 0x98" line98="    const digP7 = 0x9A" line99="    const digP8 = 0x9C" line100="    const digP9 = 0x9E" line101="" line102="    // BME Compensation Parameter Addresses for Humidity" line103="    const digH1 = 0xA1" line104="    const digH2 = 0xE1" line105="    const digH3 = 0xE3" line106="    const e5Reg = 0xE5" line107="    const e4Reg = 0xE4" line108="    const e6Reg = 0xE6" line109="    const digH6 = 0xE7" line110="" line111="    setreg(0xF2, 0x04)" line112="    setreg(0xF4, 0x2F)" line113="    setreg(0xF5, 0x0C)" line114="    setreg(0xF4, 0x2F)" line115="" line116="    function getBME280(): void {" line117="        let adc_T = (getreg(0xFA) &lt;&lt; 12) + (getreg(0xFB) &lt;&lt; 4) + (getreg(0xFC) &gt;&gt; 4)" line118="        let var1 = (((adc_T &gt;&gt; 3) - (dig_T1 &lt;&lt; 1)) * dig_T2) &gt;&gt; 11" line119="        let var2 = (((((adc_T &gt;&gt; 4) - dig_T1) * ((adc_T &gt;&gt; 4) - dig_T1)) &gt;&gt; 12) * dig_T3) &gt;&gt; 14" line120="        let t = var1 + var2" line121="        TEMPERATURE = ((t * 5 + 128) &gt;&gt; 8) / 100" line122="        var1 = (t &gt;&gt; 1) - 64000" line123="        var2 = (((var1 &gt;&gt; 2) * (var1 &gt;&gt; 2)) &gt;&gt; 11) * dig_P6" line124="        var2 = var2 + ((var1 * dig_P5) &lt;&lt; 1)" line125="        var2 = (var2 &gt;&gt; 2) + (dig_P4 &lt;&lt; 16)" line126="        var1 = (((dig_P3 * ((var1 &gt;&gt; 2) * (var1 &gt;&gt; 2)) &gt;&gt; 13) &gt;&gt; 3) + (((dig_P2) * var1) &gt;&gt; 1)) &gt;&gt; 18" line127="        var1 = ((32768 + var1) * dig_P1) &gt;&gt; 15" line128="        if (var1 == 0)" line129="            return; // avoid exception caused by division by zero" line130="        let adc_P = (getreg(0xF7) &lt;&lt; 12) + (getreg(0xF8) &lt;&lt; 4) + (getreg(0xF9) &gt;&gt; 4)" line131="        let _p = ((1048576 - adc_P) - (var2 &gt;&gt; 12)) * 3125" line132="        _p = (_p / var1) * 2;" line133="        var1 = (dig_P9 * (((_p &gt;&gt; 3) * (_p &gt;&gt; 3)) &gt;&gt; 13)) &gt;&gt; 12" line134="        var2 = (((_p &gt;&gt; 2)) * dig_P8) &gt;&gt; 13" line135="        PRESSURE = _p + ((var1 + var2 + dig_P7) &gt;&gt; 4)" line136="        let adc_H = (getreg(0xFD) &lt;&lt; 8) + getreg(0xFE)" line137="        var1 = t - 76800" line138="        var2 = (((adc_H &lt;&lt; 14) - (dig_H4 &lt;&lt; 20) - (dig_H5 * var1)) + 16384) &gt;&gt; 15" line139="        var1 = var2 * (((((((var1 * dig_H6) &gt;&gt; 10) * (((var1 * dig_H3) &gt;&gt; 11) + 32768)) &gt;&gt; 10) + 2097152) * dig_H2 + 8192) &gt;&gt; 14)" line140="        var2 = var1 - (((((var1 &gt;&gt; 15) * (var1 &gt;&gt; 15)) &gt;&gt; 7) * dig_H1) &gt;&gt; 4)" line141="        if (var2 &lt; 0) var2 = 0" line142="        if (var2 &gt; 419430400) var2 = 419430400" line143="        HUMIDITY = (var2 &gt;&gt; 12) / 1024" line144="    }" line145="" line146="    ////////////" line147="    ////////////" line148="" line149="    //% block=&quot;perform a measurement&quot;" line150="    //% block.loc.nl=&quot;voer een meting uit&quot;" line151="    export function measure() {" line152="        let value = pins.map(pins.analogReadPin(PIN_LIGHT), 0, 1023, 0, 100);" line153="        LIGHT = Math.round(value)" line154="        getBME280()" line155="    }" line156="" line157="    export enum Status {" line158="        //% block=&quot;on&quot;" line159="        //% block.loc.nl=&quot;aan&quot;" line160="        on," line161="        //% block=&quot;on&quot;" line162="        //% block.loc.nl=&quot;aan&quot;" line163="        off" line164="    }" line165="" line166="    export enum Color {" line167="        //% block=&quot;white&quot;" line168="        //% block.loc.nl=&quot;wit&quot;" line169="        white," line170="        //% block=&quot;black&quot;" line171="        //% block.loc.nl=&quot;zwart&quot;" line172="        black," line173="        //% block=&quot;red&quot;" line174="        //% block.loc.nl=&quot;rood&quot;" line175="        red," line176="        //% block=&quot;yellow&quot;" line177="        //% block.loc.nl=&quot;geel&quot;" line178="        yellow," line179="        //% block=&quot;green&quot;" line180="        //% block.loc.nl=&quot;groen&quot;" line181="        green," line182="        //% block=&quot;blue&quot;" line183="        //% block.loc.nl=&quot;blauw&quot;" line184="        blue," line185="        //% block=&quot;lightblue&quot;" line186="        //% block.loc.nl=&quot;lichtblauw&quot;" line187="        cyan," line188="        //% block=&quot;purple&quot;" line189="        //% block.loc.nl=&quot;paars&quot;" line190="        magenta" line191="    }" line192="" line193="    //% block=&quot;turn the pump %state&quot;" line194="    //% block.loc.nl=&quot;schakel de pomp %state&quot;" line195="    export function pump() {" line196="    }" line197="" line198="    //% block=&quot;set the light color to %color&quot;" line199="    //% block.loc.nl=&quot;stel de lichtkleur in op %color&quot;" line200="    export function color() {" line201="    }" line202="" line203="    //% block=&quot;set the light intensity to %state %%&quot;" line204="    //% block.loc.nl=&quot;stel de felheid in op %state %%&quot;" line205="    export function intensity() {" line206="    }" line207="" line208="    //% block=&quot;air pressure&quot;" line209="    //% block.loc.nl=&quot;luchtdruk&quot;" line210="    export function pressure(): number {" line211="        return PRESSURE" line212="    }" line213="" line214="    //% block=&quot;amount of light&quot;" line215="    //% block.loc.nl=&quot;hoeveelheid licht&quot;" line216="    export function light(): number {" line217="        return LIGHT" line218="    }" line219="" line220="    //% block=&quot;moisture&quot;" line221="    //% block.loc.nl=&quot;grondvochtigheid&quot;" line222="    export function moisture(): number {" line223="        return MOISTURE" line224="    }" line225="" line226="    //% block=&quot;humidity&quot;" line227="    //% block.loc.nl=&quot;luchtvochtigheid&quot;" line228="    export function humidity(): number {" line229="        return HUMIDITY" line230="    }" line231="" line232="    //% block=&quot;temperature&quot;" line233="    //% block.loc.nl=&quot;temperatuur&quot;" line234="    export function temperature(): number {" line235="        return TEMPERATURE" line236="    }" line237="}" numlines="238"></mutation><next><block type="typescript_statement" id=")c:4w.%Ws:t4|uU*G5j`"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace CTimer {" line1="" line2="    //% block=&quot;wait %time sec&quot;" line3="    //% block.loc.nl=&quot;wacht %time sec&quot;" line4="    export function waitSec(time: number) {" line5="        basic.pause(time * 1000);" line6="    }" line7="" line8="    //% block=&quot;wait %time min&quot;" line9="    //% block.loc.nl=&quot;wacht %time min&quot;" line10="    export function waitMin(time: number) {" line11="        basic.pause(time * 60000);" line12="    }" line13="" line14="    //% block=&quot;wait %time hours&quot;" line15="    //% block.loc.nl=&quot;wacht %time uren&quot;" line16="    export function waitHours(time: number) {" line17="        basic.pause(time * 3600000);" line18="    }" line19="" line20="    /*" line21="    The next timer code is derived from:" line22="    https://github.com/gbraad/pxt-interval" line23="    */" line24="" line25="    //% block=&quot;every %time seconds&quot;" line26="    //% block.loc.nl=&quot;om de %time seconden&quot;" line27="    export function OnEverySec(time: number, cb: () =&gt; void) {" line28="        const myTimerID = 200 + Math.randomRange(0, 100); // semi-unique" line29="        const timerTimeout = 1;" line30="" line31="        control.onEvent(myTimerID, 0, function () {" line32="            control.inBackground(() =&gt; {" line33="                cb()" line34="            })" line35="        })" line36="" line37="        control.inBackground(() =&gt; {" line38="            while (true) {" line39="                basic.pause(time * 1000);" line40="                control.raiseEvent(myTimerID, timerTimeout);" line41="            }" line42="        })" line43="    }" line44="" line45="    //% block=&quot;every %time minutes&quot;" line46="    //% block.loc.nl=&quot;om de %time minuten&quot;" line47="    export function OnEveryMin(time: number, cb: () =&gt; void) {" line48="        const myTimerID2 = 200 + Math.randomRange(0, 100); // semi-unique" line49="        const timerTimeout2 = 1;" line50="" line51="        control.onEvent(myTimerID2, 0, function () {" line52="            control.inBackground(() =&gt; {" line53="                cb()" line54="            })" line55="        })" line56="" line57="        control.inBackground(() =&gt; {" line58="            while (true) {" line59="                basic.pause(time * 60000);" line60="                control.raiseEvent(myTimerID2, timerTimeout2);" line61="            }" line62="        })" line63="    }" line64="" line65="    //% block=&quot;every %time hours&quot;" line66="    //% block.loc.nl=&quot;om de %time uren&quot;" line67="    export function OnEveryHours(time: number, cb: () =&gt; void) {" line68="        const myTimerID3 = 200 + Math.randomRange(0, 100); // semi-unique" line69="        const timerTimeout3 = 1;" line70="" line71="        control.onEvent(myTimerID3, 0, function () {" line72="            control.inBackground(() =&gt; {" line73="                cb()" line74="            })" line75="        })" line76="" line77="        control.inBackground(() =&gt; {" line78="            while (true) {" line79="                basic.pause(time * 3600000);" line80="                control.raiseEvent(myTimerID3, timerTimeout3);" line81="            }" line82="        })" line83="    }" line84="" line85="}" numlines="86"></mutation><next><block type="typescript_statement" id="A6#_,]Xf_QZlBgE`DSr*"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace CDashboard {" line1="" line2="    export enum Dashboard {" line3="        //% block=&quot;ThingSpeak&quot;" line4="        //% block.loc.nl=&quot;ThingSpeak&quot;" line5="        ThingSpeak" line6="    }" line7="" line8="    let SSID = &quot;&quot;" line9="    let PASSWORD = &quot;&quot;" line10="    let WRITEKEY = &quot;&quot;" line11="    let READKEY = &quot;&quot;" line12="    let DASHBOARD = Dashboard.ThingSpeak" line13="" line14="    //% block=&quot;send to the dashboard&quot;" line15="    //% block.loc.nl=&quot;verzend naar het dashboard&quot;" line16="    export function upload() {" line17="        switch (DASHBOARD) {" line18="            case Dashboard.ThingSpeak:" line19="                ESP8266.setData(WRITEKEY," line20="                    CBreedingBox.MOISTURE," line21="                    CBreedingBox.LIGHT," line22="                    CBreedingBox.HUMIDITY," line23="                    CBreedingBox.TEMPERATURE," line24="                    CBreedingBox.PRESSURE);" line25="                ESP8266.uploadData();" line26="                break;" line27="        }" line28="    }" line29="" line30="    //% block=&quot;connected to the dashboard&quot;" line31="    //% block.loc.nl=&quot;verbonden met het dashboard&quot;" line32="    export function connected(): boolean {" line33="        switch (DASHBOARD) {" line34="            case Dashboard.ThingSpeak:" line35="                return ESP8266.thingSpeakState(true)" line36="                break;" line37="        }" line38="        return false;" line39="    }" line40="" line41="    //% block=&quot;wifi ssid %ssid wifi password %passw dashboard writekey %wkey dashboard readkey %rkey&quot;" line42="    //% block=&quot;verbind met %dashb&quot;" line43="    export function connect(dashb:Dashboard) {" line44="        DASHBOARD = dashb" line45="        ESP8266.initWIFI(SerialPin.P8, SerialPin.P12, BaudRate.BaudRate115200)" line46="        ESP8266.connectWifi(SSID, PASSWORD)" line47="        switch (DASHBOARD) {" line48="            case Dashboard.ThingSpeak:" line49="                ESP8266.connectThingSpeak()" line50="                break;" line51="        }" line52="    }" line53="" line54="    //% block=&quot;wifi ssid %ssid wifi password %passw dashboard writekey %wkey dashboard readkey %rkey&quot;" line55="    //% block=&quot;wifi ssid %ssid wifi wachtwoord %passw dashboard writekey %wkey dashboard readkey %rkey&quot;" line56="    export function setcredentials(ssid: string, passw: string, wkey: string, rkey: string) {" line57="        SSID = ssid" line58="        PASSWORD = passw" line59="        WRITEKEY = wkey" line60="        READKEY = rkey" line61="    }" line62="}" numlines="63"></mutation></block></next></block></next></block></next></block></statement></block></xml>