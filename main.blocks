<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="+(bD,!D(pRQl1,/tA9eL" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="6K4RL,gxs[ZtmV/A6*2H"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace ESP8266 {" line1="    /*" line2="    The ESP8266 code is copied from the ElecFreaks 'esp8266-iot.ts' library:" line3="    https://github.com/elecfreaks/pxt-iot-environment-kit/blob/master/esp8266-iot.ts" line4="    (MIT-license)" line5="    */" line6="" line7="    enum Cmd {" line8="        None," line9="        ConnectWifi," line10="        ConnectThingSpeak," line11="        ConnectSmartIot," line12="        InitSmartIot," line13="        UploadSmartIot," line14="        DisconnectSmartIot," line15="        ConnectMqtt," line16="    }" line17="" line18="    export enum SmartIotSwitchState {" line19="        //% block=&quot;on&quot;" line20="        on = 1," line21="        //% block=&quot;off&quot;" line22="        off = 2" line23="    }" line24="" line25="    export enum SchemeList {" line26="        //% block=&quot;TCP&quot;" line27="        TCP = 1," line28="        //% block=&quot;TLS&quot;" line29="        TLS = 2" line30="    }" line31="" line32="    export enum QosList {" line33="        //% block=&quot;0&quot;" line34="        Qos0 = 0," line35="        //% block=&quot;1&quot;" line36="        Qos1," line37="        //% block=&quot;2&quot;" line38="        Qos2" line39="    }" line40="" line41="    let wifi_connected: boolean = false" line42="    let thingspeak_connected: boolean = false" line43="    let smartiot_connected: boolean = false" line44="    let mqttBrokerConnected: boolean = false" line45="    let userToken_def: string = &quot;&quot;" line46="    let topic_def: string = &quot;&quot;" line47="    const mqttSubscribeHandlers: { [topic: string]: (message: string) =&gt; void } = {}" line48="    const mqttSubscribeQos: { [topic: string]: number } = {}" line49="    let mqtthost_def = &quot;ELECFREAKS&quot;" line50="    let iftttkey_def = &quot;&quot;" line51="    let iftttevent_def = &quot;&quot;" line52="    let thingSpeakDatatemp = &quot;&quot;" line53="" line54="    let serialCnt = 0" line55="    let recvString = &quot;&quot;" line56="    let scanWIFIAPFlag = 0" line57="    let currentCmd: Cmd = Cmd.None" line58="" line59="    const THINGSPEAK_HOST = &quot;api.thingspeak.com&quot;" line60="    const THINGSPEAK_PORT = &quot;80&quot;" line61="    const SMARTIOT_HOST = &quot;47.239.108.37&quot;" line62="    const SMARTIOT_PORT = &quot;8081&quot;" line63="    // export function change(a:any,b:any){" line64="    //     SMARTIOT_HOST = a" line65="    //     SMARTIOT_PORT = b" line66="    // }" line67="" line68="    const EspEventSource = 3000" line69="    const EspEventValue = {" line70="        None: Cmd.None," line71="        ConnectWifi: Cmd.ConnectWifi," line72="        ConnectThingSpeak: Cmd.ConnectThingSpeak," line73="        ConnectSmartIot: Cmd.ConnectSmartIot," line74="        InitSmartIot: Cmd.InitSmartIot," line75="        UploadSmartIot: Cmd.UploadSmartIot," line76="        DisconnectSmartIot: Cmd.DisconnectSmartIot," line77="        ConnectMqtt: Cmd.ConnectMqtt," line78="        PostIFTTT: 255" line79="    }" line80="    const SmartIotEventSource = 3100" line81="    const SmartIotEventValue = {" line82="        switchOn: SmartIotSwitchState.on," line83="        switchOff: SmartIotSwitchState.off" line84="    }" line85="" line86="    let TStoSendStr = &quot;&quot;" line87="" line88="    // write AT command with CR+LF ending" line89="    function sendAT(command: string, wait: number = 0) {" line90="        serial.writeString(`${command}\u000D\u000A`)" line91="        basic.pause(wait)" line92="    }" line93="" line94="    function restEsp8266() {" line95="        sendAT(&quot;AT+RESTORE&quot;, 1000) // restore to factory settings" line96="        sendAT(&quot;AT+RST&quot;, 1000) // rest" line97="        serial.readString()" line98="        sendAT(&quot;AT+CWMODE=1&quot;, 500) // set to STA mode" line99="        sendAT(&quot;AT+SYSTIMESTAMP=1634953609130&quot;, 100) // Set local timestamp." line100="        sendAT(`AT+CIPSNTPCFG=1,8,&quot;ntp1.aliyun.com&quot;,&quot;0.pool.ntp.org&quot;,&quot;time.google.com&quot;`, 100)" line101="        basic.pause(3000)" line102="    }" line103="" line104="    function scanWIFIAP(ssid: string) {" line105="" line106="        let scanflag = 0" line107="        let mscnt = 0" line108="        recvString = &quot; &quot;" line109="        sendAT(`AT+CWLAPOPT=1,2,-100,255`)" line110="        sendAT(`AT+CWLAP`)" line111="        while (!(scanflag)) {" line112="" line113="            recvString = recvString + serial.readString()" line114="            basic.pause(1)" line115="            mscnt += 1" line116="            if (mscnt &gt;= 3000) {" line117="                scanWIFIAPFlag = 0" line118="                break" line119="            }" line120="" line121="            if (recvString.includes(&quot;+CWLAP:(&quot;)) {" line122="" line123="                mscnt = 0" line124="                recvString = recvString.slice(recvString.indexOf(&quot;+CWLAP:(&quot;))" line125="                scanflag = 1" line126="                while (1) {" line127="" line128="                    recvString += serial.readString()" line129="                    basic.pause(1)" line130="                    mscnt += 1" line131="" line132="                    // OLED.clear()" line133="                    // OLED.writeStringNewLine(_recvString)" line134="                    if (recvString.includes(&quot;OK&quot;) || mscnt &gt;= 3000) {" line135="" line136="                        if (mscnt &gt;= 3000) {" line137="                            scanWIFIAPFlag = 0" line138="                        } else if (recvString.includes(ssid)) {" line139="                            scanWIFIAPFlag = 1" line140="                        } else {" line141="                            scanWIFIAPFlag = 0" line142="                        }" line143="                        break" line144="                    }" line145="                }" line146="            }" line147="" line148="        }" line149="        recvString = &quot; &quot;" line150="    }" line151="" line152="    /**" line153="     * Initialize ESP8266 module" line154="     */" line155="    export function initWIFI(tx: SerialPin, rx: SerialPin, baudrate: BaudRate) {" line156="        serial.redirect(tx, rx, BaudRate.BaudRate115200)" line157="        basic.pause(100)" line158="        serial.setTxBufferSize(128)" line159="        serial.setRxBufferSize(128)" line160="        restEsp8266()" line161="    }" line162="" line163="    /**" line164="     * connect to Wifi router" line165="     */" line166="    export function connectWifi(ssid: string, pw: string) {" line167="" line168="        while (1) {" line169="            scanWIFIAP(ssid)" line170="            if (scanWIFIAPFlag) {" line171="                currentCmd = Cmd.ConnectWifi" line172="                sendAT(`AT+CWJAP=&quot;${ssid}&quot;,&quot;${pw}&quot;`) // connect to Wifi router" line173="                control.waitForEvent(EspEventSource, EspEventValue.ConnectWifi)" line174="                while (!wifi_connected) {" line175="                    restEsp8266()" line176="                    sendAT(`AT+CWJAP=&quot;${ssid}&quot;,&quot;${pw}&quot;`)" line177="                    control.waitForEvent(EspEventSource, EspEventValue.ConnectWifi)" line178="                }" line179="                break" line180="            } else {" line181="                restEsp8266()" line182="                currentCmd = Cmd.ConnectWifi" line183="                sendAT(`AT+CWJAP=&quot;${ssid}&quot;,&quot;${pw}&quot;`)" line184="                control.waitForEvent(EspEventSource, EspEventValue.ConnectWifi)" line185="                if (wifi_connected) {" line186="                    break" line187="                }" line188="            }" line189="        }" line190="    }" line191="" line192="    /**" line193="     * Warning: Deprecated." line194="     * Check if ESP8266 successfully connected to Wifi" line195="     */" line196="    export function wifiState(state: boolean) {" line197="        return wifi_connected === state" line198="    }" line199="" line200="    /**" line201="     * Connect to ThingSpeak" line202="     */" line203="    export function connectThingSpeak() {" line204="        thingspeak_connected = true" line205="        // connect to server" line206="        // recvString = &quot; &quot;" line207="        // serialCnt = 0" line208="        // sendAT(`AT+CIPSTART=&quot;TCP&quot;,&quot;${THINGSPEAK_HOST}&quot;,${THINGSPEAK_PORT}`)" line209="        // currentCmd = Cmd.ConnectThingSpeak" line210="        // basic.pause(1)" line211="        // recvString += serial.readString()" line212="        // if (recvString == &quot; &quot;) {" line213="        //     thingspeak_connected = false" line214="        //     //basic.showIcon(IconNames.Sad)" line215="        // } else {" line216="        //     control.waitForEvent(EspEventSource, EspEventValue.ConnectThingSpeak)" line217="" line218="        // } " line219="    }" line220="" line221="    /**" line222="     * Connect to ThingSpeak and set data." line223="     */" line224="    export function setData(write_api_key: string, n1: number = 0, n2: number = 0, n3: number = 0, n4: number = 0, n5: number = 0, n6: number = 0, n7: number = 0, n8: number = 0) {" line225="        TStoSendStr = &quot;AT+HTTPCLIENT=2,0,\&quot;http://api.thingspeak.com/update?api_key=&quot;" line226="            + write_api_key" line227="            + &quot;&amp;field1=&quot;" line228="            + n1" line229="            + &quot;&amp;field2=&quot;" line230="            + n2" line231="            + &quot;&amp;field3=&quot;" line232="            + n3" line233="            + &quot;&amp;field4=&quot;" line234="            + n4" line235="            + &quot;&amp;field5=&quot;" line236="            + n5" line237="            + &quot;&amp;field6=&quot;" line238="            + n6" line239="            + &quot;&amp;field7=&quot;" line240="            + n7" line241="            + &quot;&amp;field8=&quot;" line242="            + n8" line243="            + &quot;\&quot;,,,1&quot;" line244="    }" line245="" line246="    /**" line247="     * upload data. It would not upload anything if it failed to connect to Wifi or ThingSpeak." line248="     */" line249="    export function uploadData() {" line250="        let mscnt2 = 0" line251="        //sendAT(`AT+CIPSEND=${TStoSendStr.length + 2}`, 300)" line252="        sendAT(TStoSendStr, 100) // upload data" line253="" line254="        while (1) {" line255="" line256="            recvString += serial.readString()" line257="            basic.pause(1)" line258="            mscnt2 += 1" line259="" line260="            // OLED.clear()" line261="            // OLED.writeStringNewLine(_recvString)" line262="            if (recvString.includes(&quot;OK&quot;) || mscnt2 &gt;= 3000 || recvString.includes(&quot;ERROR&quot;)) {" line263="" line264="                break" line265="            }" line266="        }" line267="" line268="        recvString = &quot; &quot;" line269="        basic.pause(200)" line270="    }" line271="" line272="    /*" line273="     * Check if ESP8266 successfully connected to ThingSpeak" line274="     */" line275="    export function thingSpeakState(state: boolean) {" line276="        return thingspeak_connected === state" line277="    }" line278="" line279="    /* ----------------------------------- smartiot ----------------------------------- */" line280="    /*" line281="     * Connect to smartiot" line282="     */" line283="    export function connectSmartiot(userToken: string, topic: string): void {" line284="        userToken_def = userToken" line285="        topic_def = topic" line286="        currentCmd = Cmd.ConnectSmartIot" line287="        sendAT(`AT+CIPSTART=&quot;TCP&quot;,&quot;${SMARTIOT_HOST}&quot;,${SMARTIOT_PORT}`)" line288="        control.waitForEvent(EspEventSource, EspEventValue.ConnectSmartIot)" line289="        pause(100)" line290="        const jsonText = `{&quot;topic&quot;:&quot;${topic}&quot;,&quot;userToken&quot;:&quot;${userToken}&quot;,&quot;op&quot;:&quot;init&quot;}`" line291="        currentCmd = Cmd.InitSmartIot" line292="        sendAT(`AT+CIPSEND=${jsonText.length + 2}`)" line293="        control.waitForEvent(EspEventSource, EspEventValue.InitSmartIot)" line294="        if (smartiot_connected) {" line295="            sendAT(jsonText)" line296="            control.waitForEvent(EspEventSource, EspEventValue.InitSmartIot)" line297="        }" line298="        pause(1500)" line299="    }" line300="" line301="    /**" line302="     * upload data to smartiot" line303="     */" line304="    export function uploadSmartiot(data: number): void {" line305="        data = Math.floor(data)" line306="        const jsonText2 = `{&quot;topic&quot;:&quot;${topic_def}&quot;,&quot;userToken&quot;:&quot;${userToken_def}&quot;,&quot;op&quot;:&quot;up&quot;,&quot;data&quot;:&quot;${data}&quot;}`" line307="        currentCmd = Cmd.UploadSmartIot" line308="        sendAT(`AT+CIPSEND=${jsonText2.length + 2}`)" line309="        control.waitForEvent(EspEventSource, EspEventValue.UploadSmartIot)" line310="        if (smartiot_connected) {" line311="            sendAT(jsonText2)" line312="            control.waitForEvent(EspEventSource, EspEventValue.UploadSmartIot)" line313="        }" line314="        pause(1500)" line315="    }" line316="" line317="    /*" line318="     * disconnect from smartiot" line319="     */" line320="    export function disconnectSmartiot(): void {" line321="        if (smartiot_connected) {" line322="            const jsonText3 = `{&quot;topic&quot;:&quot;${topic_def}&quot;,&quot;userToken&quot;:&quot;${userToken_def}&quot;,&quot;op&quot;:&quot;close&quot;}`" line323="            currentCmd = Cmd.DisconnectSmartIot" line324="            sendAT(&quot;AT+CIPSEND=&quot; + (jsonText3.length + 2))" line325="            control.waitForEvent(EspEventSource, EspEventValue.DisconnectSmartIot)" line326="            if (smartiot_connected) {" line327="                sendAT(jsonText3)" line328="                control.waitForEvent(EspEventSource, EspEventValue.DisconnectSmartIot)" line329="            }" line330="            pause(1500)" line331="        }" line332="    }" line333="" line334="    /*" line335="     * Check if ESP8266 successfully connected to SmartIot" line336="     */" line337="    export function smartiotState(state: boolean) {" line338="        return smartiot_connected === state" line339="    }" line340="" line341="    export function iotSwitchEvent(state: SmartIotSwitchState, handler: () =&gt; void) {" line342="        control.onEvent(SmartIotEventSource, state, handler)" line343="    }" line344="" line345="    /*----------------------------------MQTT-----------------------*/" line346="    /*" line347="     * Set  MQTT client" line348="     */" line349="    export function setMQTT(scheme: SchemeList, clientID: string, username: string, password: string, path: string): void {" line350="        sendAT(`AT+MQTTUSERCFG=0,${scheme},&quot;${clientID}&quot;,&quot;${username}&quot;,&quot;${password}&quot;,0,0,&quot;${path}&quot;`, 1000)" line351="    }" line352="" line353="    /*" line354="     * Connect to MQTT broker" line355="     */" line356="    export function connectMQTT(host: string, port: number, reconnect: boolean): void {" line357="        mqtthost_def = host" line358="        const rec = reconnect ? 0 : 1" line359="        currentCmd = Cmd.ConnectMqtt" line360="        sendAT(`AT+MQTTCONN=0,&quot;${host}&quot;,${port},${rec}`)" line361="        control.waitForEvent(EspEventSource, EspEventValue.ConnectMqtt)" line362="        Object.keys(mqttSubscribeQos).forEach(topic =&gt; {" line363="            const qos = mqttSubscribeQos[topic]" line364="            sendAT(`AT+MQTTSUB=0,&quot;${topic}&quot;,${qos}`, 1000)" line365="        })" line366="    }" line367="" line368="    /*" line369="     * Check if ESP8266 successfully connected to mqtt broker" line370="     */" line371="    export function isMqttBrokerConnected() {" line372="        return mqttBrokerConnected" line373="    }" line374="" line375="    /*" line376="     * send message" line377="     */" line378="    export function publishMqttMessage(msg: string, topic: string, qos: QosList): void {" line379="        sendAT(`AT+MQTTPUB=0,&quot;${topic}&quot;,&quot;${msg}&quot;,${qos},0`, 1000)" line380="        recvString = &quot;&quot;" line381="    }" line382="" line383="    /*" line384="     * disconnect MQTT broker" line385="     */" line386="    export function breakMQTT(): void {" line387="        sendAT(&quot;AT+MQTTCLEAN=0&quot;, 1000)" line388="    }" line389="" line390="    export function MqttEvent(topic: string, qos: QosList, handler: (message: string) =&gt; void) {" line391="        mqttSubscribeHandlers[topic] = handler" line392="        mqttSubscribeQos[topic] = qos" line393="    }" line394="" line395="    ////////// ----------------------------------- IFTTT ----------------------------------- //////////" line396="    /*" line397="     * set ifttt" line398="     */" line399="    export function setIFTTT(key: string, event: string): void {" line400="        iftttkey_def = key" line401="        iftttevent_def = event" line402="    }" line403="" line404="    /*" line405="     * post ifttt" line406="     */" line407="    export function postIFTTT(value1: string, value2: string, value3: string): void {" line408="        let sendST1 = &quot;AT+HTTPCLIENT=3,1,\&quot;http://maker.ifttt.com/trigger/&quot; + iftttevent_def + &quot;/with/key/&quot; + iftttkey_def + &quot;\&quot;,,,2,&quot;" line409="        let sendST2 = &quot;\&quot;{\\\&quot;value1\\\&quot;:\\\&quot;&quot; + value1 + &quot;\\\&quot;\\\,\\\&quot;value2\\\&quot;:\\\&quot;&quot; + value2 + &quot;\\\&quot;\\\,\\\&quot;value3\\\&quot;:\\\&quot;&quot; + value3 + &quot;\\\&quot;}\&quot;&quot;" line410="        let sendST = sendST1 + sendST2" line411="        sendAT(sendST, 1000)" line412="        //control.waitForEvent(EspEventSource, EspEventValue.PostIFTTT)" line413="    }" line414="" line415="    /*" line416="     * on serial received data" line417="     */" line418="    serial.onDataReceived(serial.delimiters(Delimiters.NewLine), function () {" line419="        recvString += serial.readString()" line420="        pause(1)" line421="        serialCnt += 1" line422="" line423="        // received smart iot data" line424="        if (recvString.includes(&quot;switchoff&quot;)) {" line425="            recvString = &quot;&quot;" line426="            control.raiseEvent(SmartIotEventSource, SmartIotEventValue.switchOff)" line427="        } else if (recvString.includes(&quot;switchon&quot;)) {" line428="            recvString = &quot;&quot;" line429="            control.raiseEvent(SmartIotEventSource, SmartIotEventValue.switchOn)" line430="        }" line431="" line432="        if (recvString.includes(&quot;MQTTSUBRECV&quot;)) {" line433="            recvString = recvString.slice(recvString.indexOf(&quot;MQTTSUBRECV&quot;))" line434="            const recvStringSplit = recvString.split(&quot;,&quot;, 4)" line435="            const topic = recvStringSplit[1].slice(1, -1)" line436="            const message = recvStringSplit[3].slice(0, -2)" line437="            mqttSubscribeHandlers[topic] &amp;&amp; mqttSubscribeHandlers[topic](message)" line438="            recvString = &quot;&quot;" line439="        }" line440="" line441="        if (recvString.includes(&quot;Congratu&quot;)) {" line442="            recvString = &quot;&quot;" line443="            control.raiseEvent(EspEventSource, EspEventValue.PostIFTTT)" line444="        }" line445="" line446="        switch (currentCmd) {" line447="            case Cmd.ConnectWifi:" line448="                if (recvString.includes(&quot;AT+CWJAP&quot;)) {" line449="                    recvString = recvString.slice(recvString.indexOf(&quot;AT+CWJAP&quot;))" line450="                    if (recvString.includes(&quot;WIFI GOT IP&quot;)) {" line451="                        wifi_connected = true" line452="                        recvString = &quot;&quot;" line453="                        control.raiseEvent(EspEventSource, EspEventValue.ConnectWifi)" line454="                    } else if (recvString.includes(&quot;ERROR&quot;)) {" line455="                        wifi_connected = false" line456="                        recvString = &quot;&quot;" line457="                        control.raiseEvent(EspEventSource, EspEventValue.ConnectWifi)" line458="                    }" line459="                }" line460="                break" line461="            case Cmd.ConnectThingSpeak:" line462="                if (recvString.includes(THINGSPEAK_HOST)) {" line463="                    recvString = recvString.slice(recvString.indexOf(THINGSPEAK_HOST))" line464="                    if (recvString.includes(&quot;CONNECT&quot;)) {" line465="                        thingspeak_connected = true" line466="                        recvString = &quot;&quot;" line467="                        control.raiseEvent(EspEventSource, EspEventValue.ConnectThingSpeak)" line468="                    } else if (recvString.includes(&quot;ERROR&quot;)) {" line469="                        thingspeak_connected = false" line470="                        recvString = &quot;&quot;" line471="                        control.raiseEvent(EspEventSource, EspEventValue.ConnectThingSpeak)" line472="                    }" line473="                } else if (recvString.includes(&quot;WIFI GOT IP&quot;)) {" line474="                    thingspeak_connected = false" line475="                    recvString = &quot;&quot;" line476="                    control.raiseEvent(EspEventSource, EspEventValue.ConnectThingSpeak)" line477="                }" line478="                break" line479="            case Cmd.ConnectSmartIot:" line480="                if (recvString.includes(SMARTIOT_HOST)) {" line481="                    recvString = recvString.slice(recvString.indexOf(SMARTIOT_HOST))" line482="                    if (recvString.includes(&quot;CONNECT&quot;)) {" line483="                        smartiot_connected = true" line484="                        recvString = &quot;&quot;" line485="                        control.raiseEvent(EspEventSource, EspEventValue.ConnectSmartIot)" line486="                    } else if (recvString.includes(&quot;ERROR&quot;)) {" line487="                        smartiot_connected = false" line488="                        recvString = &quot;&quot;" line489="                        control.raiseEvent(EspEventSource, EspEventValue.ConnectSmartIot)" line490="                    }" line491="                }" line492="                break" line493="            case Cmd.InitSmartIot:" line494="                if (recvString.includes(&quot;AT+CIPSEND&quot;)) {" line495="                    recvString = recvString.slice(recvString.indexOf(&quot;AT+CIPSEND&quot;))" line496="                    if (recvString.includes(&quot;OK&quot;)) {" line497="                        smartiot_connected = true" line498="                        recvString = &quot;&quot;" line499="                        control.raiseEvent(EspEventSource, EspEventValue.InitSmartIot)" line500="                    } else if (recvString.includes(&quot;ERROR&quot;)) {" line501="                        smartiot_connected = false" line502="                        recvString = &quot;&quot;" line503="                        control.raiseEvent(EspEventSource, EspEventValue.InitSmartIot)" line504="                    }" line505="                } else {" line506="                    if (recvString.includes(&quot;SEND OK&quot;)) {" line507="                        smartiot_connected = true" line508="                        recvString = &quot;&quot;" line509="                        control.raiseEvent(EspEventSource, EspEventValue.InitSmartIot)" line510="                    } else if (recvString.includes(&quot;ERROR&quot;)) {" line511="                        smartiot_connected = false" line512="                        recvString = &quot;&quot;" line513="                        control.raiseEvent(EspEventSource, EspEventValue.InitSmartIot)" line514="                    }" line515="                }" line516="                break" line517="            case Cmd.UploadSmartIot:" line518="                if (recvString.includes(&quot;AT+CIPSEND&quot;)) {" line519="                    recvString = recvString.slice(recvString.indexOf(&quot;AT+CIPSEND&quot;))" line520="                    if (recvString.includes(&quot;OK&quot;)) {" line521="                        smartiot_connected = true" line522="                        recvString = &quot;&quot;" line523="                        control.raiseEvent(EspEventSource, EspEventValue.UploadSmartIot)" line524="                    } else if (recvString.includes(&quot;ERROR&quot;)) {" line525="                        smartiot_connected = false" line526="                        recvString = &quot;&quot;" line527="                        control.raiseEvent(EspEventSource, EspEventValue.UploadSmartIot)" line528="                    }" line529="                } else {" line530="                    if (recvString.includes(&quot;SEND OK&quot;)) {" line531="                        smartiot_connected = true" line532="                        recvString = &quot;&quot;" line533="                        control.raiseEvent(EspEventSource, EspEventValue.UploadSmartIot)" line534="                    } else if (recvString.includes(&quot;ERROR&quot;)) {" line535="                        smartiot_connected = false" line536="                        recvString = &quot;&quot;" line537="                        control.raiseEvent(EspEventSource, EspEventValue.UploadSmartIot)" line538="                    }" line539="                }" line540="                break" line541="            case Cmd.DisconnectSmartIot:" line542="                if (recvString.includes(&quot;AT+CIPSEND&quot;)) {" line543="                    recvString = recvString.slice(recvString.indexOf(&quot;AT+CIPSEND&quot;))" line544="                    if (recvString.includes(&quot;OK&quot;)) {" line545="                        smartiot_connected = true" line546="                        recvString = &quot;&quot;" line547="                        control.raiseEvent(EspEventSource, EspEventValue.DisconnectSmartIot)" line548="                    } else if (recvString.includes(&quot;ERROR&quot;)) {" line549="                        smartiot_connected = false" line550="                        recvString = &quot;&quot;" line551="                        control.raiseEvent(EspEventSource, EspEventValue.DisconnectSmartIot)" line552="                    }" line553="                } else {" line554="                    if (recvString.includes(&quot;SEND OK&quot;)) {" line555="                        smartiot_connected = false" line556="                        recvString = &quot;&quot;" line557="                        control.raiseEvent(EspEventSource, EspEventValue.DisconnectSmartIot)" line558="                    } else if (recvString.includes(&quot;ERROR&quot;)) {" line559="                        smartiot_connected = false" line560="                        recvString = &quot;&quot;" line561="                        control.raiseEvent(EspEventSource, EspEventValue.DisconnectSmartIot)" line562="                    }" line563="                }" line564="                break" line565="            case Cmd.ConnectMqtt:" line566="                if (recvString.includes(mqtthost_def)) {" line567="                    recvString = recvString.slice(recvString.indexOf(mqtthost_def))" line568="                    if (recvString.includes(&quot;OK&quot;)) {" line569="                        mqttBrokerConnected = true" line570="                        recvString = &quot;&quot;" line571="                        control.raiseEvent(EspEventSource, EspEventValue.ConnectMqtt)" line572="                    } else if (recvString.includes(&quot;ERROR&quot;)) {" line573="                        mqttBrokerConnected = false" line574="                        recvString = &quot;&quot;" line575="                        control.raiseEvent(EspEventSource, EspEventValue.ConnectMqtt)" line576="                    }" line577="                }" line578="                break" line579="        }" line580="    })" line581="}" numlines="582"></mutation><next><block type="typescript_statement" id="Sf$XpEM59GMaR+n9rn2t"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum NeoPixelMode {" line1="    RGB = 1," line2="    RGBW = 2," line3="    RGB_RGB = 3" line4="}" numlines="5"></mutation><next><block type="typescript_statement" id="scay#[(IU!Fo~.^pUjgw"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace neopixel {" line1="" line2="    export class Strip {" line3="        buf: Buffer;" line4="        pin: DigitalPin;" line5="        // TODO: encode as bytes instead of 32bit" line6="        brightness: number;" line7="        start: number; // start offset in LED strip" line8="        _length: number; // number of LEDs" line9="        _mode: NeoPixelMode;" line10="        _matrixWidth: number; // number of leds in a matrix - if any" line11="" line12="        showColor(rgb: number) {" line13="            rgb = rgb &gt;&gt; 0;" line14="            this.setAllRGB(rgb);" line15="            this.show();" line16="        }" line17="" line18="        show() {" line19="            // only supported in beta" line20="            // ws2812b.setBufferMode(this.pin, this._mode);" line21="            ws2812b.sendBuffer(this.buf, this.pin);" line22="        }" line23="" line24="        clear(): void {" line25="            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line26="            this.buf.fill(0, this.start * stride, this._length * stride);" line27="        }" line28="" line29="        setBrightness(brightness: number): void {" line30="            this.brightness = brightness &amp; 0xff;" line31="        }" line32="" line33="        setPin(pin: DigitalPin): void {" line34="            this.pin = pin;" line35="            pins.digitalWritePin(this.pin, 0);" line36="            // don't yield to avoid races on initialization" line37="        }" line38="" line39="        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {" line40="            if (this._mode === NeoPixelMode.RGB_RGB) {" line41="                this.buf[offset + 0] = red;" line42="                this.buf[offset + 1] = green;" line43="            } else {" line44="                this.buf[offset + 0] = green;" line45="                this.buf[offset + 1] = red;" line46="            }" line47="            this.buf[offset + 2] = blue;" line48="        }" line49="" line50="        private setAllRGB(rgb: number) {" line51="            let red = unpackR(rgb);" line52="            let green = unpackG(rgb);" line53="            let blue = unpackB(rgb);" line54="" line55="            const br = this.brightness;" line56="            if (br &lt; 255) {" line57="                red = (red * br) &gt;&gt; 8;" line58="                green = (green * br) &gt;&gt; 8;" line59="                blue = (blue * br) &gt;&gt; 8;" line60="            }" line61="            const end = this.start + this._length;" line62="            const stride2 = this._mode === NeoPixelMode.RGBW ? 4 : 3;" line63="            for (let i = this.start; i &lt; end; ++i) {" line64="                this.setBufferRGB(i * stride2, red, green, blue)" line65="            }" line66="        }" line67="    }" line68="" line69="    export function create(pin: DigitalPin, numleds: number, mode: NeoPixelMode): Strip {" line70="        let strip = new Strip();" line71="        let stride3 = mode === NeoPixelMode.RGBW ? 4 : 3;" line72="        strip.buf = pins.createBuffer(numleds * stride3);" line73="        strip.start = 0;" line74="        strip._length = numleds;" line75="        strip._mode = mode || NeoPixelMode.RGB;" line76="        strip._matrixWidth = 0;" line77="        strip.setBrightness(128)" line78="        strip.setPin(pin)" line79="        return strip;" line80="    }" line81="" line82="    function packRGB(a: number, b: number, c: number): number {" line83="        return ((a &amp; 0xFF) &lt;&lt; 16) | ((b &amp; 0xFF) &lt;&lt; 8) | (c &amp; 0xFF);" line84="    }" line85="    function unpackR(rgb: number): number {" line86="        let r = (rgb &gt;&gt; 16) &amp; 0xFF;" line87="        return r;" line88="    }" line89="    function unpackG(rgb: number): number {" line90="        let g = (rgb &gt;&gt; 8) &amp; 0xFF;" line91="        return g;" line92="    }" line93="    function unpackB(rgb: number): number {" line94="        let b = (rgb) &amp; 0xFF;" line95="        return b;" line96="    }" line97="}" numlines="98"></mutation><next><block type="typescript_statement" id="D;#Vpb0yQ[fFxa*cq5mE"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace BME280 {" line1="" line2="    export let HUMIDITY: number = 0" line3="    export let TEMPERATURE: number = 0" line4="    export let PRESSURE: number = 0" line5="" line6="    /*" line7="    The BME280 code is taken from the ElecFreaks 'environment.ts' library:" line8="    https://github.com/elecfreaks/pxt-iot-environment-kit/blob/master/environment.ts" line9="    (MIT-license)" line10="    */" line11="" line12="    function setreg(reg: number, dat: number): void {" line13="        let buf = pins.createBuffer(2);" line14="        buf[0] = reg;" line15="        buf[1] = dat;" line16="        pins.i2cWriteBuffer(BME280_I2C_ADDR, buf);" line17="    }" line18="" line19="    function getreg(reg: number): number {" line20="        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);" line21="        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.UInt8BE);" line22="    }" line23="" line24="    function getInt8LE(reg: number): number {" line25="        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);" line26="        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.Int8LE);" line27="    }" line28="" line29="    function getUInt16LE(reg: number): number {" line30="        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);" line31="        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.UInt16LE);" line32="    }" line33="" line34="    function getInt16LE(reg: number): number {" line35="        pins.i2cWriteNumber(BME280_I2C_ADDR, reg, NumberFormat.UInt8BE);" line36="        return pins.i2cReadNumber(BME280_I2C_ADDR, NumberFormat.Int16LE);" line37="    }" line38="" line39="    let BME280_I2C_ADDR = 0x76" line40="" line41="    let dig_T1 = getUInt16LE(0x88)" line42="    let dig_T2 = getInt16LE(0x8A)" line43="    let dig_T3 = getInt16LE(0x8C)" line44="    let dig_P1 = getUInt16LE(0x8E)" line45="    let dig_P2 = getInt16LE(0x90)" line46="    let dig_P3 = getInt16LE(0x92)" line47="    let dig_P4 = getInt16LE(0x94)" line48="    let dig_P5 = getInt16LE(0x96)" line49="    let dig_P6 = getInt16LE(0x98)" line50="    let dig_P7 = getInt16LE(0x9A)" line51="    let dig_P8 = getInt16LE(0x9C)" line52="    let dig_P9 = getInt16LE(0x9E)" line53="" line54="    let dig_H1 = getreg(0xA1)" line55="    let dig_H2 = getInt16LE(0xE1)" line56="    let dig_H3 = getreg(0xE3)" line57="    let a = getreg(0xE5)" line58="    let dig_H4 = (getreg(0xE4) &lt;&lt; 4) + (a % 16)" line59="    let dig_H5 = (getreg(0xE6) &lt;&lt; 4) + (a &gt;&gt; 4)" line60="    let dig_H6 = getInt8LE(0xE7)" line61="" line62="    // Stores compensation values for Temperature (must be read from BME280 NVM)" line63="    let digT1Val = 0" line64="    let digT2Val = 0" line65="    let digT3Val = 0" line66="" line67="    // Stores compensation values for humidity (must be read from BME280 NVM)" line68="    let digH1Val = 0" line69="    let digH2Val = 0" line70="    let digH3Val = 0" line71="    let digH4Val = 0" line72="    let digH5Val = 0" line73="    let digH6Val = 0" line74="" line75="    // Buffer to hold pressure compensation values to pass to the C++ compensation function" line76="    let digPBuf: Buffer" line77="" line78="    // BME Compensation Parameter Addresses for Temperature" line79="    const digT1 = 0x88" line80="    const digT2 = 0x8A" line81="    const digT3 = 0x8C" line82="" line83="    // BME Compensation Parameter Addresses for Pressure" line84="    const digP1 = 0x8E" line85="    const digP2 = 0x90" line86="    const digP3 = 0x92" line87="    const digP4 = 0x94" line88="    const digP5 = 0x96" line89="    const digP6 = 0x98" line90="    const digP7 = 0x9A" line91="    const digP8 = 0x9C" line92="    const digP9 = 0x9E" line93="" line94="    // BME Compensation Parameter Addresses for Humidity" line95="    const digH1 = 0xA1" line96="    const digH2 = 0xE1" line97="    const digH3 = 0xE3" line98="    const e5Reg = 0xE5" line99="    const e4Reg = 0xE4" line100="    const e6Reg = 0xE6" line101="    const digH6 = 0xE7" line102="" line103="    setreg(0xF2, 0x04)" line104="    setreg(0xF4, 0x2F)" line105="    setreg(0xF5, 0x0C)" line106="    setreg(0xF4, 0x2F)" line107="" line108="    export function measure(): void {" line109="        let adc_T = (getreg(0xFA) &lt;&lt; 12) + (getreg(0xFB) &lt;&lt; 4) + (getreg(0xFC) &gt;&gt; 4)" line110="        let var1 = (((adc_T &gt;&gt; 3) - (dig_T1 &lt;&lt; 1)) * dig_T2) &gt;&gt; 11" line111="        let var2 = (((((adc_T &gt;&gt; 4) - dig_T1) * ((adc_T &gt;&gt; 4) - dig_T1)) &gt;&gt; 12) * dig_T3) &gt;&gt; 14" line112="        let t = var1 + var2" line113="        TEMPERATURE = ((t * 5 + 128) &gt;&gt; 8) / 100" line114="        var1 = (t &gt;&gt; 1) - 64000" line115="        var2 = (((var1 &gt;&gt; 2) * (var1 &gt;&gt; 2)) &gt;&gt; 11) * dig_P6" line116="        var2 = var2 + ((var1 * dig_P5) &lt;&lt; 1)" line117="        var2 = (var2 &gt;&gt; 2) + (dig_P4 &lt;&lt; 16)" line118="        var1 = (((dig_P3 * ((var1 &gt;&gt; 2) * (var1 &gt;&gt; 2)) &gt;&gt; 13) &gt;&gt; 3) + (((dig_P2) * var1) &gt;&gt; 1)) &gt;&gt; 18" line119="        var1 = ((32768 + var1) * dig_P1) &gt;&gt; 15" line120="        if (var1 == 0)" line121="            return; // avoid exception caused by division by zero" line122="        let adc_P = (getreg(0xF7) &lt;&lt; 12) + (getreg(0xF8) &lt;&lt; 4) + (getreg(0xF9) &gt;&gt; 4)" line123="        let _p = ((1048576 - adc_P) - (var2 &gt;&gt; 12)) * 3125" line124="        _p = (_p / var1) * 2;" line125="        var1 = (dig_P9 * (((_p &gt;&gt; 3) * (_p &gt;&gt; 3)) &gt;&gt; 13)) &gt;&gt; 12" line126="        var2 = (((_p &gt;&gt; 2)) * dig_P8) &gt;&gt; 13" line127="        PRESSURE = _p + ((var1 + var2 + dig_P7) &gt;&gt; 4)" line128="        let adc_H = (getreg(0xFD) &lt;&lt; 8) + getreg(0xFE)" line129="        var1 = t - 76800" line130="        var2 = (((adc_H &lt;&lt; 14) - (dig_H4 &lt;&lt; 20) - (dig_H5 * var1)) + 16384) &gt;&gt; 15" line131="        var1 = var2 * (((((((var1 * dig_H6) &gt;&gt; 10) * (((var1 * dig_H3) &gt;&gt; 11) + 32768)) &gt;&gt; 10) + 2097152) * dig_H2 + 8192) &gt;&gt; 14)" line132="        var2 = var1 - (((((var1 &gt;&gt; 15) * (var1 &gt;&gt; 15)) &gt;&gt; 7) * dig_H1) &gt;&gt; 4)" line133="        if (var2 &lt; 0) var2 = 0" line134="        if (var2 &gt; 419430400) var2 = 419430400" line135="        HUMIDITY = (var2 &gt;&gt; 12) / 1024" line136="    }" line137="}" numlines="138"></mutation><next><block type="typescript_statement" id="hByq6Re61^ji|HK_`bs-"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace DHT22 {" line1="" line2="    /*" line3="    The DHT code is taken from an older version of the tjnkertanker library:" line4="    https://github.com/tinkertanker/pxt-iot-environment-kit/releases/tag/v5.2.7" line5="    (MIT-license)" line6="    Note that the latest release does not work" line7="    */" line8="" line9="    let dataPin = DigitalPin.P14" line10="" line11="    export let TEMPERATURE2: number = -999.0" line12="    export let HUMIDITY2: number = -999.0" line13="    export let SUCCESS: boolean = false" line14="" line15="    export function setPin( pin: DigitalPin) {" line16="        dataPin = pin" line17="    }" line18="" line19="    export function measure() {" line20="        const DHT11_TIMEOUT = 100" line21="        const buffer = pins.createBuffer(40)" line22="        const data = [0, 0, 0, 0, 0]" line23="        let startTime = control.micros()" line24="" line25="        // TODO: V2 bug" line26="        pins.digitalReadPin(DigitalPin.P0);" line27="        pins.digitalReadPin(DigitalPin.P1);" line28="        pins.digitalReadPin(DigitalPin.P2);" line29="        pins.digitalReadPin(DigitalPin.P3);" line30="        pins.digitalReadPin(DigitalPin.P4);" line31="        pins.digitalReadPin(DigitalPin.P10);" line32="" line33="        // 1.start signal" line34="        pins.digitalWritePin(dataPin, 0)" line35="        basic.pause(18)" line36="" line37="        // 2.pull up and wait 40us" line38="        pins.setPull(dataPin, PinPullMode.PullUp)" line39="        pins.digitalReadPin(dataPin)" line40="        control.waitMicros(40)" line41="" line42="        // 3.read data" line43="        startTime = control.micros()" line44="        while (pins.digitalReadPin(dataPin) === 0) {" line45="            if (control.micros() - startTime &gt; DHT11_TIMEOUT) break" line46="        }" line47="        startTime = control.micros()" line48="        while (pins.digitalReadPin(dataPin) === 1) {" line49="            if (control.micros() - startTime &gt; DHT11_TIMEOUT) break" line50="        }" line51="" line52="        for (let dataBits = 0; dataBits &lt; 40; dataBits++) {" line53="            startTime = control.micros()" line54="            while (pins.digitalReadPin(dataPin) === 1) {" line55="                if (control.micros() - startTime &gt; DHT11_TIMEOUT) break" line56="            }" line57="            startTime = control.micros()" line58="            while (pins.digitalReadPin(dataPin) === 0) {" line59="                if (control.micros() - startTime &gt; DHT11_TIMEOUT) break" line60="            }" line61="            control.waitMicros(28)" line62="            if (pins.digitalReadPin(dataPin) === 1) {" line63="                buffer[dataBits] = 1" line64="            }" line65="        }" line66="" line67="        for (let j = 0; j &lt; 5; j++) {" line68="            for (let k = 0; k &lt; 8; k++) {" line69="                if (buffer[8 * j + k] === 1) {" line70="                    data[j] += 2 ** (7 - k)" line71="                }" line72="            }" line73="        }" line74="" line75="        if (((data[0] + data[1] + data[2] + data[3]) &amp; 0xff) === data[4]) {" line76="            HUMIDITY2 = (data[0] &lt;&lt; 8) | data[1]" line77="            HUMIDITY2 *= 0.1" line78="            TEMPERATURE2 = data[2] + data[3] * 0.1" line79="        }" line80="    }" line81="}" numlines="82"></mutation><next><block type="typescript_statement" id="wetJyEM*8aI*7o:D/fx;"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace CBreedingBox {" line1="" line2="    let PIN_SOIL = AnalogPin.P1" line3="    let PIN_LIGHT = AnalogPin.P2" line4="    DHT22.setPin( DigitalPin.P14)" line5="    let NEOP = neopixel.create(DigitalPin.P15, 8, NeoPixelMode.RGB)" line6="    let PIN_PUMP = DigitalPin.P16" line7="" line8="    export let MOISTURE : number = -999" line9="    export let LIGHT : number = -999" line10="" line11="    export enum State {" line12="        //% block=&quot;on&quot;" line13="        //% block.loc.nl=&quot;aan&quot;" line14="        on," line15="        //% block=&quot;on&quot;" line16="        //% block.loc.nl=&quot;uit&quot;" line17="        off" line18="    }" line19="" line20="    export enum Sensor {" line21="        //% block=&quot;DHT22&quot;" line22="        //% block.loc.nl=&quot;DHT22&quot;" line23="        Dht22," line24="        //% block=&quot;BME280&quot;" line25="        //% block.loc.nl=&quot;BME280&quot;" line26="        Bme280," line27="        //% block=&quot;none&quot;" line28="        //% block.loc.nl=&quot;geen&quot;" line29="        None" line30="    }" line31="" line32="    let SENSOR = Sensor.None" line33="" line34="    export enum Color {" line35="        //% block=&quot;red&quot;" line36="        //% block.loc.nl=&quot;rood&quot;" line37="        Red = 0xFF0000," line38="        //% block=&quot;orange&quot;" line39="        //% block.loc.nl=&quot;oranje&quot;" line40="        Orange = 0xFFA500," line41="        //% block=&quot;yellow&quot;" line42="        //% block.loc.nl=&quot;geel&quot;" line43="        Yellow = 0xFFFF00," line44="        //% block=&quot;green&quot;" line45="        //% block.loc.nl=&quot;groen&quot;" line46="        Green = 0x00FF00," line47="        //% block=&quot;blue&quot;" line48="        //% block.loc.nl=&quot;blauw&quot;" line49="        Blue = 0x0000FF," line50="        //% block=&quot;indigo&quot;" line51="        //% block.loc.nl=&quot;indigo&quot;" line52="        Indigo = 0x4b0082," line53="        //% block=&quot;violet&quot;" line54="        //% block.loc.nl=&quot;violet&quot;" line55="        Violet = 0x8a2be2," line56="        //% block=&quot;purple&quot;" line57="        //% block.loc.nl=&quot;paars&quot;" line58="        Purple = 0xFF00FF," line59="        //% block=&quot;white&quot;" line60="        //% block.loc.nl=&quot;wit&quot;" line61="        White = 0xFFFFFF," line62="        //% block=&quot;black&quot;" line63="        //% block.loc.nl=&quot;zwart&quot;" line64="        Black = 0x000000" line65="    }" line66="" line67="    //% block=&quot;user %sensor&quot;" line68="    //% block.loc.nl=&quot;gebruik %sensor&quot;" line69="    export function useSensor(sensor: Sensor) {" line70="        SENSOR = sensor" line71="    }" line72="" line73="    //% block=&quot;perform a measurement&quot;" line74="    //% block.loc.nl=&quot;voer een meting uit&quot;" line75="    export function measure() {" line76="        let voltL = pins.analogReadPin(PIN_LIGHT)" line77="        let valueL = pins.map(voltL, 0, 1023, 0, 100)" line78="        LIGHT = Math.round(valueL)" line79="" line80="        // the moisture sensor gives values from 136 to 236" line81="        // value 136 means fully soaken, 237 means fully dry" line82="        let valueS = pins.analogReadPin(PIN_SOIL) - 136" line83="        if (valueS &lt; 0) valueS = 0" line84="        if (valueS &gt; 100) valueS = 100" line85="        MOISTURE = Math.round(100-valueS)" line86="" line87="        switch ( SENSOR) {" line88="            case Sensor.Bme280: BME280.measure(); break;" line89="            case Sensor.Dht22:  DHT22.measure(); break;" line90="        }" line91="    }" line92="" line93="    //% block=&quot;turn the pump %state&quot;" line94="    //% block.loc.nl=&quot;schakel de pomp %state&quot;" line95="    export function pump(state:State) {" line96="        if ( state == State.on )" line97="            pins.digitalWritePin(PIN_PUMP, 1)" line98="        else" line99="            pins.digitalWritePin(PIN_PUMP, 0)" line100="    }" line101="" line102="    //% block=&quot;set the light color to %color with brightness %brightness&quot;" line103="    //% block.loc.nl=&quot;stel de lichtkleur in op %color met helderheid %brightness&quot;" line104="    //% brightness.min=0 brightness.max=100 brightness.defl=100" line105="    export function setColor(color: Color, brightness: number) {" line106="        NEOP.showColor( color);" line107="        NEOP.setBrightness( brightness)" line108="    }" line109="" line110="    //% block=&quot;air pressure&quot;" line111="    //% block.loc.nl=&quot;luchtdruk&quot;" line112="    export function pressure(): number {" line113="        if ( SENSOR == Sensor.Bme280) return BME280.PRESSURE" line114="        return -1000" line115="    }" line116="" line117="    //% block=&quot;amount of light&quot;" line118="    //% block.loc.nl=&quot;hoeveelheid licht&quot;" line119="    export function light(): number {" line120="        return LIGHT" line121="    }" line122="" line123="    //% block=&quot;bone-dry&quot;" line124="    //% block.loc.nl=&quot;kurkdroog&quot;" line125="    //% group=&quot;•&quot;" line126="    export function moisture0(): number {" line127="        return 25" line128="    }" line129="" line130="    //% block=&quot;dry&quot;" line131="    //% block.loc.nl=&quot;droog&quot;" line132="    //% group=&quot;•&quot;" line133="    export function moisture1(): number {" line134="        return 50" line135="    }" line136="" line137="    //% block=&quot;moist&quot;" line138="    //% block.loc.nl=&quot;vochtig&quot;" line139="    //% group=&quot;•&quot;" line140="    export function moisture2(): number {" line141="        return 70" line142="    }" line143="" line144="    //% block=&quot;wet&quot;" line145="    //% block.loc.nl=&quot;nat&quot;" line146="    //% group=&quot;•&quot;" line147="    export function moisture3(): number {" line148="        return 85" line149="    }" line150="" line151="    //% block=&quot;soaking&quot;" line152="    //% block.loc.nl=&quot;doornat&quot;" line153="    //% group=&quot;•&quot;" line154="    export function moisture4(): number {" line155="        return MOISTURE" line156="    }" line157="" line158="    //% block=&quot;moisture&quot;" line159="    //% block.loc.nl=&quot;grondvochtigheid&quot;" line160="    export function moisture(): number {" line161="        return MOISTURE" line162="    }" line163="" line164="    //% block=&quot;humidity&quot;" line165="    //% block.loc.nl=&quot;luchtvochtigheid&quot;" line166="    export function humidity(): number {" line167="        if (SENSOR == Sensor.Bme280) return BME280.HUMIDITY" line168="        if (SENSOR == Sensor.Dht22) return DHT22.HUMIDITY2" line169="        return -1000" line170="    }" line171="" line172="    //% block=&quot;temperature&quot;" line173="    //% block.loc.nl=&quot;temperatuur&quot;" line174="    export function temperature(): number {" line175="        if (SENSOR == Sensor.Bme280) return BME280.TEMPERATURE" line176="        if (SENSOR == Sensor.Dht22) return DHT22.TEMPERATURE2" line177="        return -1000" line178="    }" line179="}" numlines="180"></mutation><next><block type="typescript_statement" id="]v3lRq1]h7plpiY;K1D1"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace CTimer {" line1="" line2="    //% block=&quot;wait %time sec&quot;" line3="    //% block.loc.nl=&quot;wacht %time sec&quot;" line4="    export function waitSec(time: number) {" line5="        basic.pause(time * 1000);" line6="    }" line7="" line8="    //% block=&quot;wait %time min&quot;" line9="    //% block.loc.nl=&quot;wacht %time min&quot;" line10="    export function waitMin(time: number) {" line11="        basic.pause(time * 60000);" line12="    }" line13="" line14="    //% block=&quot;wait %time hours&quot;" line15="    //% block.loc.nl=&quot;wacht %time uren&quot;" line16="    export function waitHours(time: number) {" line17="        basic.pause(time * 3600000);" line18="    }" line19="" line20="    /*" line21="    The next timer code is derived from:" line22="    https://github.com/gbraad/pxt-interval" line23="    */" line24="" line25="    //% block=&quot;every %time seconds&quot;" line26="    //% block.loc.nl=&quot;om de %time seconden&quot;" line27="    export function OnEverySec(time: number, cb: () =&gt; void) {" line28="        const myTimerID = 200 + Math.randomRange(0, 100); // semi-unique" line29="        const timerTimeout = 1;" line30="" line31="        control.onEvent(myTimerID, 0, function () {" line32="            control.inBackground(() =&gt; {" line33="                cb()" line34="            })" line35="        })" line36="" line37="        control.inBackground(() =&gt; {" line38="            while (true) {" line39="                basic.pause(time * 1000);" line40="                control.raiseEvent(myTimerID, timerTimeout);" line41="            }" line42="        })" line43="    }" line44="" line45="    //% block=&quot;every %time minutes&quot;" line46="    //% block.loc.nl=&quot;om de %time minuten&quot;" line47="    export function OnEveryMin(time: number, cb: () =&gt; void) {" line48="        const myTimerID2 = 200 + Math.randomRange(0, 100); // semi-unique" line49="        const timerTimeout2 = 1;" line50="" line51="        control.onEvent(myTimerID2, 0, function () {" line52="            control.inBackground(() =&gt; {" line53="                cb()" line54="            })" line55="        })" line56="" line57="        control.inBackground(() =&gt; {" line58="            while (true) {" line59="                basic.pause(time * 60000);" line60="                control.raiseEvent(myTimerID2, timerTimeout2);" line61="            }" line62="        })" line63="    }" line64="" line65="    //% block=&quot;every %time hours&quot;" line66="    //% block.loc.nl=&quot;om de %time uren&quot;" line67="    export function OnEveryHours(time: number, cb: () =&gt; void) {" line68="        const myTimerID3 = 200 + Math.randomRange(0, 100); // semi-unique" line69="        const timerTimeout3 = 1;" line70="" line71="        control.onEvent(myTimerID3, 0, function () {" line72="            control.inBackground(() =&gt; {" line73="                cb()" line74="            })" line75="        })" line76="" line77="        control.inBackground(() =&gt; {" line78="            while (true) {" line79="                basic.pause(time * 3600000);" line80="                control.raiseEvent(myTimerID3, timerTimeout3);" line81="            }" line82="        })" line83="    }" line84="" line85="}" numlines="86"></mutation><next><block type="typescript_statement" id="+k#cb,WpIP[Zb5K`QXX@"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace CDashboard {" line1="" line2="    export enum Dashboard {" line3="        //% block=&quot;ThingSpeak&quot;" line4="        //% block.loc.nl=&quot;ThingSpeak&quot;" line5="        ThingSpeak" line6="    }" line7="" line8="    let SSID = &quot;&quot;" line9="    let PASSWORD = &quot;&quot;" line10="    let WRITEKEY = &quot;&quot;" line11="    let READKEY = &quot;&quot;" line12="    let DASHBOARD = Dashboard.ThingSpeak" line13="" line14="    //% block=&quot;send to the dashboard&quot;" line15="    //% block.loc.nl=&quot;verzend naar het dashboard&quot;" line16="    export function upload() {" line17="        switch (DASHBOARD) {" line18="            case Dashboard.ThingSpeak:" line19="                ESP8266.setData(WRITEKEY," line20="                    CBreedingBox.MOISTURE," line21="                    CBreedingBox.LIGHT," line22="                    BME280.HUMIDITY," line23="                    BME280.TEMPERATURE," line24="                    BME280.PRESSURE);" line25="                ESP8266.uploadData();" line26="                break;" line27="        }" line28="    }" line29="" line30="    //% block=&quot;connected to the dashboard&quot;" line31="    //% block.loc.nl=&quot;verbonden met het dashboard&quot;" line32="    export function connected(): boolean {" line33="        switch (DASHBOARD) {" line34="            case Dashboard.ThingSpeak:" line35="                return ESP8266.thingSpeakState(true)" line36="                break;" line37="        }" line38="        return false;" line39="    }" line40="" line41="    //% block=&quot;wifi ssid %ssid wifi password %passw dashboard writekey %wkey dashboard readkey %rkey&quot;" line42="    //% block=&quot;verbind met %dashb&quot;" line43="    export function connect(dashb:Dashboard) {" line44="        DASHBOARD = dashb" line45="        ESP8266.initWIFI(SerialPin.P8, SerialPin.P12, BaudRate.BaudRate115200)" line46="        ESP8266.connectWifi(SSID, PASSWORD)" line47="        switch (DASHBOARD) {" line48="            case Dashboard.ThingSpeak:" line49="                ESP8266.connectThingSpeak()" line50="                break;" line51="        }" line52="    }" line53="" line54="    //% block=&quot;wifi ssid %ssid wifi password %passw dashboard writekey %wkey dashboard readkey %rkey&quot;" line55="    //% block=&quot;wifi ssid %ssid wifi wachtwoord %passw dashboard writekey %wkey dashboard readkey %rkey&quot;" line56="    export function setcredentials(ssid: string, passw: string, wkey: string, rkey: string) {" line57="        SSID = ssid" line58="        PASSWORD = passw" line59="        WRITEKEY = wkey" line60="        READKEY = rkey" line61="    }" line62="}" numlines="63"></mutation><next><block type="typescript_statement" id="{ohhi~%m$w{#h5LBot3Z"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace CBarDiagram {" line1="" line2="    let BARS = 3" line3="    let LOWLEFT = 0" line4="    let LOWMID = 0" line5="    let LOWRIGHT = 0" line6="    let HIGHLEFT = 100" line7="    let HIGHMID = 100" line8="    let HIGHRIGHT = 100" line9="" line10="    export enum Bar {" line11="        //% block=&quot;left&quot;" line12="        //% block.loc.nl=&quot;linker&quot;" line13="        Left," line14="        //% block=&quot;midst&quot;" line15="        //% block.loc.nl=&quot;middelste&quot;" line16="        Mid," line17="        //% block=&quot;right&quot;" line18="        //% block.loc.nl=&quot;rechter&quot;" line19="        Right" line20="    }" line21="" line22="    //% block=&quot;use %count bars&quot;" line23="    //% block.loc.nl=&quot;gebruik %count staven&quot;" line24="    //% count.min=1 count.max=3 valperc.defl=3" line25="    export function bars(count: number) {" line26="        BARS = count;" line27="    }" line28="" line29="    //% block=&quot;set the high value for the %pos bar to %valperc&quot;" line30="    //% block.loc.nl=&quot;stel de bovenwaarde van de %pos staaf in op %valperc&quot;" line31="    //% valperc.min=0 valperc.max=100 valperc.defl=100" line32="    export function highValue(pos: Bar, valperc: number) {" line33="        if (pos == Bar.Left)" line34="            HIGHLEFT = (valperc &gt; LOWLEFT ? valperc : LOWLEFT)" line35="        else" line36="        if (pos == Bar.Mid)" line37="            HIGHMID = (valperc &gt; LOWMID ? valperc : LOWMID)" line38="        else" line39="            HIGHRIGHT = (valperc &gt; LOWRIGHT ? valperc : LOWRIGHT)" line40="    }" line41="" line42="    //% block=&quot;set the low value for the %pos bar to %valperc&quot;" line43="    //% block.loc.nl=&quot;stel de onderwaarde van de %pos staaf in op %valperc&quot;" line44="    //% valperc.min=0 valperc.max=100 valperc.defl=0" line45="    export function lowValue(pos: Bar, valperc: number) {" line46="        if (pos == Bar.Left)" line47="            LOWLEFT = (valperc &lt; HIGHLEFT ? valperc : HIGHLEFT)" line48="        else" line49="        if (pos == Bar.Mid)" line50="            LOWMID = (valperc &lt; HIGHMID ? valperc : HIGHMID)" line51="        else" line52="            LOWRIGHT = (valperc &lt; HIGHRIGHT ? valperc : HIGHRIGHT)" line53="    }" line54="" line55="    //% block=&quot;draw the %pos bar with value %valperc&quot;" line56="    //% block.loc.nl=&quot;teken de %pos staaf met waarde %valperc&quot;" line57="    //% valperc.min=0 valperc.max=100 valperc.defl=0" line58="    export function bar(pos: Bar, valperc: number) {" line59="        let x = (pos == Bar.Left ? 0 : 3)" line60="        let w = 4 - BARS" line61="        let low = (pos == Bar.Left ? LOWLEFT : LOWRIGHT)" line62="        let high = (pos == Bar.Left ? HIGHLEFT : HIGHRIGHT)" line63="" line64="        switch (pos) {" line65="            case Bar.Left: low = LOWLEFT; high = HIGHLEFT" line66="                           x = 0" line67="                           break" line68="            case Bar.Mid: low = LOWMID; high = HIGHMID;" line69="                          x = (BARS == 1 ? 1 : 2)" line70="                          break;" line71="            case Bar.Right: low = LOWRIGHT; high = HIGHRIGHT;" line72="                            x = 5 - w" line73="                            break;" line74="        }" line75="" line76="        if (valperc == low) {" line77="            for (let y = 0; y &lt; 5; y++) {" line78="                led.unplot(x, 4 - y)" line79="                if (w &gt; 1)" line80="                    led.unplot(x + 1, 4 - y)" line81="                if (w &gt; 2)" line82="                    led.unplot(x + 2, 4 - y)" line83="            }" line84="        }" line85="        else {" line86="            valperc = Math.map(valperc, low, high, 0, 4)" line87="            for (let y2 = 0; y2 &lt; 5; y2++) {" line88="                if (y2 &lt;= valperc) {" line89="                    led.plot(x, 4 - y2)" line90="                    if (w &gt; 1)" line91="                        led.plot(x + 1, 4 - y2)" line92="                    if (w &gt; 2)" line93="                        led.plot(x + 2, 4 - y2)" line94="                }" line95="                else {" line96="                    led.unplot(x, 4 - y2)" line97="                    if (w &gt; 1)" line98="                        led.unplot(x + 1, 4 - y2)" line99="                    if (w &gt; 2)" line100="                        led.unplot(x + 2, 4 - y2)" line101="                }" line102="            }" line103="        }" line104="    }" line105="}" numlines="106"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>